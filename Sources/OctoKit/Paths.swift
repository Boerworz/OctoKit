// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import APIClient
import HTTPHeaders

public enum Paths {}

extension Paths {
    public static var root: Root {
        Root(path: "/")
    }

    public struct Root {
        /// Path: `/`
        public let path: String

        /// GitHub API Root
        ///
        /// Get Hypermedia links to resources accessible in GitHub's REST API
        ///
        /// [API method documentation](https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var authorizationsURL: String
            public var codeSearchURL: String
            public var commitSearchURL: String
            public var currentUserAuthorizationsHTMLURL: String
            public var currentUserRepositoriesURL: String
            public var currentUserURL: String
            public var emailsURL: String
            public var emojisURL: String
            public var eventsURL: String
            public var feedsURL: String
            public var followersURL: String
            public var followingURL: String
            public var gistsURL: String
            public var hubURL: String
            public var issueSearchURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelSearchURL: String
            public var notificationsURL: String
            public var organizationRepositoriesURL: String
            public var organizationTeamsURL: String
            public var organizationURL: String
            public var publicGistsURL: String
            public var rateLimitURL: String
            public var repositorySearchURL: String
            public var repositoryURL: String
            public var starredGistsURL: String
            public var starredURL: String
            public var topicSearchURL: String?
            public var userOrganizationsURL: String
            public var userRepositoriesURL: String
            public var userSearchURL: String
            public var userURL: String

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.authorizationsURL = try values.decode(String.self, forKey: "authorizations_url")
                self.codeSearchURL = try values.decode(String.self, forKey: "code_search_url")
                self.commitSearchURL = try values.decode(String.self, forKey: "commit_search_url")
                self.currentUserAuthorizationsHTMLURL = try values.decode(String.self, forKey: "current_user_authorizations_html_url")
                self.currentUserRepositoriesURL = try values.decode(String.self, forKey: "current_user_repositories_url")
                self.currentUserURL = try values.decode(String.self, forKey: "current_user_url")
                self.emailsURL = try values.decode(String.self, forKey: "emails_url")
                self.emojisURL = try values.decode(String.self, forKey: "emojis_url")
                self.eventsURL = try values.decode(String.self, forKey: "events_url")
                self.feedsURL = try values.decode(String.self, forKey: "feeds_url")
                self.followersURL = try values.decode(String.self, forKey: "followers_url")
                self.followingURL = try values.decode(String.self, forKey: "following_url")
                self.gistsURL = try values.decode(String.self, forKey: "gists_url")
                self.hubURL = try values.decode(String.self, forKey: "hub_url")
                self.issueSearchURL = try values.decode(String.self, forKey: "issue_search_url")
                self.issuesURL = try values.decode(String.self, forKey: "issues_url")
                self.keysURL = try values.decode(String.self, forKey: "keys_url")
                self.labelSearchURL = try values.decode(String.self, forKey: "label_search_url")
                self.notificationsURL = try values.decode(String.self, forKey: "notifications_url")
                self.organizationRepositoriesURL = try values.decode(String.self, forKey: "organization_repositories_url")
                self.organizationTeamsURL = try values.decode(String.self, forKey: "organization_teams_url")
                self.organizationURL = try values.decode(String.self, forKey: "organization_url")
                self.publicGistsURL = try values.decode(String.self, forKey: "public_gists_url")
                self.rateLimitURL = try values.decode(String.self, forKey: "rate_limit_url")
                self.repositorySearchURL = try values.decode(String.self, forKey: "repository_search_url")
                self.repositoryURL = try values.decode(String.self, forKey: "repository_url")
                self.starredGistsURL = try values.decode(String.self, forKey: "starred_gists_url")
                self.starredURL = try values.decode(String.self, forKey: "starred_url")
                self.topicSearchURL = try values.decodeIfPresent(String.self, forKey: "topic_search_url")
                self.userOrganizationsURL = try values.decode(String.self, forKey: "user_organizations_url")
                self.userRepositoriesURL = try values.decode(String.self, forKey: "user_repositories_url")
                self.userSearchURL = try values.decode(String.self, forKey: "user_search_url")
                self.userURL = try values.decode(String.self, forKey: "user_url")
            }
        }
    }
}

extension Paths {
    public static var app: App {
        App(path: "/app")
    }

    public struct App {
        /// Path: `/app`
        public let path: String

        /// Get the authenticated app
        ///
        /// Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-the-authenticated-app)
        public func get() -> Request<Integration> {
            .get(path)
        }
    }
}

extension Paths {
    public static var appManifests: AppManifests {
        AppManifests(path: "/app-manifests")
    }

    public struct AppManifests {
        /// Path: `/app-manifests`
        public let path: String
    }
}

extension Paths.AppManifests {
    public func code(_ code: String) -> WithCode {
        WithCode(path: path + "/" + code)
    }

    public struct WithCode {
        /// Path: `/app-manifests/{code}`
        public let path: String
    }
}

extension Paths.AppManifests.WithCode {
    public var conversions: Conversions {
        Conversions(path: path + "/conversions")
    }

    public struct Conversions {
        /// Path: `/app-manifests/{code}/conversions`
        public let path: String


    }
}

extension Paths.App {
    public var hook: Hook {
        Hook(path: path + "/hook")
    }

    public struct Hook {
        /// Path: `/app/hook`
        public let path: String
    }
}

extension Paths.App.Hook {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/app/hook/config`
        public let path: String

        /// Get a webhook configuration for an app
        ///
        /// Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app)
        public func get() -> Request<WebhookConfig> {
            .get(path)
        }
    }
}

extension Paths.App.Hook {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/app/hook/deliveries`
        public let path: String

        /// List deliveries for an app webhook
        ///
        /// Returns a list of webhook deliveries for the webhook configured for a GitHub App.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook)
        public func get() -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path)
        }
    }
}

extension Paths.App.Hook.Deliveries {
    public func deliveryID(_ deliveryID: String) -> WithDeliveryID {
        WithDeliveryID(path: path + "/" + deliveryID)
    }

    public struct WithDeliveryID {
        /// Path: `/app/hook/deliveries/{delivery_id}`
        public let path: String

        /// Get a delivery for an app webhook
        ///
        /// Returns a delivery for the webhook configured for a GitHub App.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook)
        public func get() -> Request<HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.App.Hook.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/app/hook/deliveries/{delivery_id}/attempts`
        public let path: String


    }
}

extension Paths.App {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/app/installations`
        public let path: String

        /// List installations for the authenticated app
        ///
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        /// 
        /// The permissions the installation has are included under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)
        public func get() -> Request<[OctoKit.Installation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.App.Installations {
    public func installationID(_ installationID: String) -> WithInstallationID {
        WithInstallationID(path: path + "/" + installationID)
    }

    public struct WithInstallationID {
        /// Path: `/app/installations/{installation_id}`
        public let path: String

        /// Get an installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app)
        public func get() -> Request<Installation> {
            .get(path)
        }

        /// Delete an installation for the authenticated app
        ///
        /// Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.App.Installations.WithInstallationID {
    public var accessTokens: AccessTokens {
        AccessTokens(path: path + "/access_tokens")
    }

    public struct AccessTokens {
        /// Path: `/app/installations/{installation_id}/access_tokens`
        public let path: String


    }
}

extension Paths.App.Installations.WithInstallationID {
    public var suspended: Suspended {
        Suspended(path: path + "/suspended")
    }

    public struct Suspended {
        /// Path: `/app/installations/{installation_id}/suspended`
        public let path: String

        /// Unsuspend an app installation
        ///
        /// Removes a GitHub App installation suspension.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var applications: Applications {
        Applications(path: "/applications")
    }

    public struct Applications {
        /// Path: `/applications`
        public let path: String
    }
}

extension Paths.Applications {
    public var grants: Grants {
        Grants(path: path + "/grants")
    }

    public struct Grants {
        /// Path: `/applications/grants`
        public let path: String

        /// List your grants
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.ApplicationGrant]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Applications.Grants {
    public func grantID(_ grantID: String) -> WithGrantID {
        WithGrantID(path: path + "/" + grantID)
    }

    public struct WithGrantID {
        /// Path: `/applications/grants/{grant_id}`
        public let path: String

        /// Get a single grant
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-grant)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<ApplicationGrant> {
            .get(path)
        }

        /// Delete a grant
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        /// 
        /// Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#delete-a-grant)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Applications {
    public func clientID(_ clientID: String) -> WithClientID {
        WithClientID(path: path + "/" + clientID)
    }

    public struct WithClientID {
        /// Path: `/applications/{client_id}`
        public let path: String
    }
}

extension Paths.Applications.WithClientID {
    public var grant: Grant {
        Grant(path: path + "/grant")
    }

    public struct Grant {
        /// Path: `/applications/{client_id}/grant`
        public let path: String

        /// Delete an app authorization
        ///
        /// OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
        /// Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-app-authorization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Applications.WithClientID {
    public var token: Token {
        Token(path: path + "/token")
    }

    public struct Token {
        /// Path: `/applications/{client_id}/token`
        public let path: String

        /// Delete an app token
        ///
        /// OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#delete-an-app-token)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Applications.WithClientID.Token {
    public var scoped: Scoped {
        Scoped(path: path + "/scoped")
    }

    public struct Scoped {
        /// Path: `/applications/{client_id}/token/scoped`
        public let path: String


    }
}

extension Paths {
    public static var apps: Apps {
        Apps(path: "/apps")
    }

    public struct Apps {
        /// Path: `/apps`
        public let path: String
    }
}

extension Paths.Apps {
    public func appSlug(_ appSlug: String) -> WithAppSlug {
        WithAppSlug(path: path + "/" + appSlug)
    }

    public struct WithAppSlug {
        /// Path: `/apps/{app_slug}`
        public let path: String

        /// Get an app
        ///
        /// **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
        /// 
        /// If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps/#get-an-app)
        public func get() -> Request<Integration> {
            .get(path)
        }
    }
}

extension Paths {
    public static var authorizations: Authorizations {
        Authorizations(path: "/authorizations")
    }

    public struct Authorizations {
        /// Path: `/authorizations`
        public let path: String

        /// List your authorizations
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.Authorization]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Authorizations {
    public var clients: Clients {
        Clients(path: path + "/clients")
    }

    public struct Clients {
        /// Path: `/authorizations/clients`
        public let path: String
    }
}

extension Paths.Authorizations.Clients {
    public func clientID(_ clientID: String) -> WithClientID {
        WithClientID(path: path + "/" + clientID)
    }

    public struct WithClientID {
        /// Path: `/authorizations/clients/{client_id}`
        public let path: String


    }
}

extension Paths.Authorizations.Clients.WithClientID {
    public func fingerprint(_ fingerprint: String) -> WithFingerprint {
        WithFingerprint(path: path + "/" + fingerprint)
    }

    public struct WithFingerprint {
        /// Path: `/authorizations/clients/{client_id}/{fingerprint}`
        public let path: String


    }
}

extension Paths.Authorizations {
    public func authorizationID(_ authorizationID: String) -> WithAuthorizationID {
        WithAuthorizationID(path: path + "/" + authorizationID)
    }

    public struct WithAuthorizationID {
        /// Path: `/authorizations/{authorization_id}`
        public let path: String

        /// Get a single authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-authorization)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<Authorization> {
            .get(path)
        }

        /// Delete an authorization
        ///
        /// **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/oauth-authorizations#delete-an-authorization)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var codesOfConduct: CodesOfConduct {
        CodesOfConduct(path: "/codes_of_conduct")
    }

    public struct CodesOfConduct {
        /// Path: `/codes_of_conduct`
        public let path: String

        /// Get all codes of conduct
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct)
        public func get() -> Request<[OctoKit.CodeOfConduct]> {
            .get(path)
        }
    }
}

extension Paths.CodesOfConduct {
    public func key(_ key: String) -> WithKey {
        WithKey(path: path + "/" + key)
    }

    public struct WithKey {
        /// Path: `/codes_of_conduct/{key}`
        public let path: String

        /// Get a code of conduct
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct)
        public func get() -> Request<CodeOfConduct> {
            .get(path)
        }
    }
}

extension Paths {
    public static var emojis: Emojis {
        Emojis(path: "/emojis")
    }

    public struct Emojis {
        /// Path: `/emojis`
        public let path: String

        /// Get emojis
        ///
        /// Lists all the emojis available to use on GitHub.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/emojis#get-emojis)
        public func get() -> Request<[String: String]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var enterprises: Enterprises {
        Enterprises(path: "/enterprises")
    }

    public struct Enterprises {
        /// Path: `/enterprises`
        public let path: String
    }
}

extension Paths.Enterprises {
    public func enterprise(_ enterprise: String) -> WithEnterprise {
        WithEnterprise(path: path + "/" + enterprise)
    }

    public struct WithEnterprise {
        /// Path: `/enterprises/{enterprise}`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/enterprises/{enterprise}/actions`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/enterprises/{enterprise}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for an enterprise
        ///
        /// Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise)
        public func get() -> Request<ActionsEnterprisePermissions> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/enterprises/{enterprise}/actions/permissions/organizations`
        public let path: String

        /// List selected organizations enabled for GitHub Actions in an enterprise
        ///
        /// Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var organizations: [OctoKit.OrganizationSimple]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.organizations = try values.decode([OctoKit.OrganizationSimple].self, forKey: "organizations")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions.Organizations {
    public func orgID(_ orgID: String) -> WithOrgID {
        WithOrgID(path: path + "/" + orgID)
    }

    public struct WithOrgID {
        /// Path: `/enterprises/{enterprise}/actions/permissions/organizations/{org_id}`
        public let path: String

        /// Disable a selected organization for GitHub Actions in an enterprise
        ///
        /// Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/enterprises/{enterprise}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for an enterprise
        ///
        /// Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise)
        public func get() -> Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for an enterprise
        ///
        /// Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise)
        public func put(_ body: OctoKit.SelectedActions) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an enterprise
        ///
        /// Lists all self-hosted runner groups for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var runnerGroups: [OctoKit.RunnerGroupsEnterprise]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runnerGroups = try values.decode([OctoKit.RunnerGroupsEnterprise].self, forKey: "runner_groups")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups {
    public func runnerGroupID(_ runnerGroupID: String) -> WithRunnerGroupID {
        WithRunnerGroupID(path: path + "/" + runnerGroupID)
    }

    public struct WithRunnerGroupID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}`
        public let path: String

        /// Get a self-hosted runner group for an enterprise
        ///
        /// Gets a specific self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise)
        public func get() -> Request<RunnerGroupsEnterprise> {
            .get(path)
        }

        /// Delete a self-hosted runner group from an enterprise
        ///
        /// Deletes a self-hosted runner group for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations`
        public let path: String

        /// List organization access to a self-hosted runner group in an enterprise
        ///
        /// Lists the organizations with access to a self-hosted runner group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var organizations: [OctoKit.OrganizationSimple]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.organizations = try values.decode([OctoKit.OrganizationSimple].self, forKey: "organizations")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID.Organizations {
    public func orgID(_ orgID: String) -> WithOrgID {
        WithOrgID(path: path + "/" + orgID)
    }

    public struct WithOrgID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}`
        public let path: String

        /// Remove organization access to a self-hosted runner group in an enterprise
        ///
        /// Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners`
        public let path: String

        /// List self-hosted runners in a group for an enterprise
        ///
        /// Lists the self-hosted runners that are in a specific enterprise group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var runners: [OctoKit.Runner]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runners = try values.decode([OctoKit.Runner].self, forKey: "runners")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.RunnerGroups.WithRunnerGroupID.Runners {
    public func runnerID(_ runnerID: String) -> WithRunnerID {
        WithRunnerID(path: path + "/" + runnerID)
    }

    public struct WithRunnerID {
        /// Path: `/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`
        public let path: String

        /// Remove a self-hosted runner from a group for an enterprise
        ///
        /// Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/enterprises/{enterprise}/actions/runners`
        public let path: String

        /// List self-hosted runners for an enterprise
        ///
        /// Lists all self-hosted runners configured for an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var runners: [OctoKit.Runner]?
            public var totalCount: Double?

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runners = try values.decodeIfPresent([OctoKit.Runner].self, forKey: "runners")
                self.totalCount = try values.decodeIfPresent(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/enterprises/{enterprise}/actions/runners/downloads`
        public let path: String

        /// List runner applications for an enterprise
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise)
        public func get() -> Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/enterprises/{enterprise}/actions/runners/registration-token`
        public let path: String


    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/enterprises/{enterprise}/actions/runners/remove-token`
        public let path: String


    }
}

extension Paths.Enterprises.WithEnterprise.Actions.Runners {
    public func runnerID(_ runnerID: String) -> WithRunnerID {
        WithRunnerID(path: path + "/" + runnerID)
    }

    public struct WithRunnerID {
        /// Path: `/enterprises/{enterprise}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for an enterprise
        ///
        /// Gets a specific self-hosted runner configured in an enterprise.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise)
        public func get() -> Request<Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from an enterprise
        ///
        /// Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var auditLog: AuditLog {
        AuditLog(path: path + "/audit-log")
    }

    public struct AuditLog {
        /// Path: `/enterprises/{enterprise}/audit-log`
        public let path: String

        /// Get the audit log for an enterprise
        ///
        /// Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise)
        public func get() -> Request<[OctoKit.AuditLogEvent]> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/enterprises/{enterprise}/settings`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/enterprises/{enterprise}/settings/billing`
        public let path: String
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/enterprises/{enterprise}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for an enterprise
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise)
        public func get() -> Request<ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var advancedSecurity: AdvancedSecurity {
        AdvancedSecurity(path: path + "/advanced-security")
    }

    public struct AdvancedSecurity {
        /// Path: `/enterprises/{enterprise}/settings/billing/advanced-security`
        public let path: String

        /// Get GitHub Advanced Security active committers for an enterprise
        ///
        /// Gets the GitHub Advanced Security active committers for an enterprise per repository.
        /// Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of active_users for each repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise)
        public func get() -> Request<AdvancedSecurityActiveCommitters> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/enterprises/{enterprise}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for an enterprise
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise)
        public func get() -> Request<PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Enterprises.WithEnterprise.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/enterprises/{enterprise}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for an enterprise
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// The authenticated user must be an enterprise admin.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-enterprise)
        public func get() -> Request<CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths {
    public static var events: Events {
        Events(path: "/events")
    }

    public struct Events {
        /// Path: `/events`
        public let path: String

        /// List public events
        ///
        /// We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var feeds: Feeds {
        Feeds(path: "/feeds")
    }

    public struct Feeds {
        /// Path: `/feeds`
        public let path: String

        /// Get feeds
        ///
        /// GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
        /// 
        /// *   **Timeline**: The GitHub global public timeline
        /// *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
        /// *   **Current user public**: The public timeline for the authenticated user
        /// *   **Current user**: The private timeline for the authenticated user
        /// *   **Current user actor**: The private timeline for activity created by the authenticated user
        /// *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
        /// *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
        /// 
        /// **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-feeds)
        public func get() -> Request<Feed> {
            .get(path)
        }
    }
}

extension Paths {
    public static var gists: Gists {
        Gists(path: "/gists")
    }

    public struct Gists {
        /// Path: `/gists`
        public let path: String

        /// List gists for the authenticated user
        ///
        /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.BaseGist]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/gists/public`
        public let path: String

        /// List public gists
        ///
        /// List public gists sorted by most recently updated to least recently updated.
        /// 
        /// Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-public-gists)
        public func get() -> Request<[OctoKit.BaseGist]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/gists/starred`
        public let path: String

        /// List starred gists
        ///
        /// List the authenticated user's starred gists:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-starred-gists)
        public func get() -> Request<[OctoKit.BaseGist]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists {
    public func gistID(_ gistID: String) -> WithGistID {
        WithGistID(path: path + "/" + gistID)
    }

    public struct WithGistID {
        /// Path: `/gists/{gist_id}`
        public let path: String

        /// Get a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist)
        public func get() -> Request<GistSimple> {
            .get(path)
        }

        /// Delete a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#delete-a-gist)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/gists/{gist_id}/comments`
        public let path: String

        /// List gist comments
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-comments)
        public func get() -> Request<[OctoKit.GistComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists.WithGistID.Comments {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: path + "/" + commentID)
    }

    public struct WithCommentID {
        /// Path: `/gists/{gist_id}/comments/{comment_id}`
        public let path: String

        /// Get a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist-comment)
        public func get() -> Request<GistComment> {
            .get(path)
        }

        /// Delete a gist comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#delete-a-gist-comment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/gists/{gist_id}/commits`
        public let path: String

        /// List gist commits
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-commits)
        public func get() -> Request<[OctoKit.GistCommit]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists.WithGistID {
    public var forks: Forks {
        Forks(path: path + "/forks")
    }

    public struct Forks {
        /// Path: `/gists/{gist_id}/forks`
        public let path: String

        /// List gist forks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gist-forks)
        public func get() -> Request<[OctoKit.GistSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Gists.WithGistID {
    public var star: Star {
        Star(path: path + "/star")
    }

    public struct Star {
        /// Path: `/gists/{gist_id}/star`
        public let path: String

        /// Check if a gist is starred
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Unstar a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#unstar-a-gist)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Gists.WithGistID {
    public func sha(_ sha: String) -> WithSha {
        WithSha(path: path + "/" + sha)
    }

    public struct WithSha {
        /// Path: `/gists/{gist_id}/{sha}`
        public let path: String

        /// Get a gist revision
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist-revision)
        public func get() -> Request<GistSimple> {
            .get(path)
        }
    }
}

extension Paths {
    public static var gitignore: Gitignore {
        Gitignore(path: "/gitignore")
    }

    public struct Gitignore {
        /// Path: `/gitignore`
        public let path: String
    }
}

extension Paths.Gitignore {
    public var templates: Templates {
        Templates(path: path + "/templates")
    }

    public struct Templates {
        /// Path: `/gitignore/templates`
        public let path: String

        /// Get all gitignore templates
        ///
        /// List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates)
        public func get() -> Request<[String]> {
            .get(path)
        }
    }
}

extension Paths.Gitignore.Templates {
    public func name(_ name: String) -> WithName {
        WithName(path: path + "/" + name)
    }

    public struct WithName {
        /// Path: `/gitignore/templates/{name}`
        public let path: String

        /// Get a gitignore template
        ///
        /// The API also allows fetching the source of a single template.
        /// Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template)
        public func get() -> Request<GitignoreTemplate> {
            .get(path)
        }
    }
}

extension Paths {
    public static var installation: Installation {
        Installation(path: "/installation")
    }

    public struct Installation {
        /// Path: `/installation`
        public let path: String
    }
}

extension Paths.Installation {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/installation/repositories`
        public let path: String

        /// List repositories accessible to the app installation
        ///
        /// List repositories that an app installation can access.
        /// 
        /// You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.Repository]
            /// Example: selected
            public var repositorySelection: String?
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.Repository].self, forKey: "repositories")
                self.repositorySelection = try values.decodeIfPresent(String.self, forKey: "repository_selection")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Installation {
    public var token: Token {
        Token(path: path + "/token")
    }

    public struct Token {
        /// Path: `/installation/token`
        public let path: String

        /// Revoke an installation access token
        ///
        /// Revokes the installation token you're using to authenticate as an installation and access this endpoint.
        /// 
        /// Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
        /// 
        /// You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var issues: Issues {
        Issues(path: "/issues")
    }

    public struct Issues {
        /// Path: `/issues`
        public let path: String

        /// List issues assigned to the authenticated user
        ///
        /// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
        /// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
        /// necessarily assigned to you.
        /// 
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user)
        public func get() -> Request<[OctoKit.Issue]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var licenses: Licenses {
        Licenses(path: "/licenses")
    }

    public struct Licenses {
        /// Path: `/licenses`
        public let path: String

        /// Get all commonly used licenses
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses)
        public func get() -> Request<[OctoKit.LicenseSimple]> {
            .get(path)
        }
    }
}

extension Paths.Licenses {
    public func license(_ license: String) -> WithLicense {
        WithLicense(path: path + "/" + license)
    }

    public struct WithLicense {
        /// Path: `/licenses/{license}`
        public let path: String

        /// Get a license
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses#get-a-license)
        public func get() -> Request<License> {
            .get(path)
        }
    }
}

extension Paths {
    public static var markdown: Markdown {
        Markdown(path: "/markdown")
    }

    public struct Markdown {
        /// Path: `/markdown`
        public let path: String


    }
}

extension Paths.Markdown {
    public var raw: Raw {
        Raw(path: path + "/raw")
    }

    public struct Raw {
        /// Path: `/markdown/raw`
        public let path: String


    }
}

extension Paths {
    public static var marketplaceListing: MarketplaceListing {
        MarketplaceListing(path: "/marketplace_listing")
    }

    public struct MarketplaceListing {
        /// Path: `/marketplace_listing`
        public let path: String
    }
}

extension Paths.MarketplaceListing {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/accounts`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Accounts {
    public func accountID(_ accountID: String) -> WithAccountID {
        WithAccountID(path: path + "/" + accountID)
    }

    public struct WithAccountID {
        /// Path: `/marketplace_listing/accounts/{account_id}`
        public let path: String

        /// Get a subscription plan for an account
        ///
        /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account)
        public func get() -> Request<MarketplacePurchase> {
            .get(path)
        }
    }
}

extension Paths.MarketplaceListing {
    public var plans: Plans {
        Plans(path: path + "/plans")
    }

    public struct Plans {
        /// Path: `/marketplace_listing/plans`
        public let path: String

        /// List plans
        ///
        /// Lists all plans that are part of your GitHub Marketplace listing.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-plans)
        public func get() -> Request<[OctoKit.MarketplaceListingPlan]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.MarketplaceListing.Plans {
    public func planID(_ planID: String) -> WithPlanID {
        WithPlanID(path: path + "/" + planID)
    }

    public struct WithPlanID {
        /// Path: `/marketplace_listing/plans/{plan_id}`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Plans.WithPlanID {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/plans/{plan_id}/accounts`
        public let path: String

        /// List accounts for a plan
        ///
        /// Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan)
        public func get() -> Request<[OctoKit.MarketplacePurchase]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.MarketplaceListing {
    public var stubbed: Stubbed {
        Stubbed(path: path + "/stubbed")
    }

    public struct Stubbed {
        /// Path: `/marketplace_listing/stubbed`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/stubbed/accounts`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed.Accounts {
    public func accountID(_ accountID: String) -> WithAccountID {
        WithAccountID(path: path + "/" + accountID)
    }

    public struct WithAccountID {
        /// Path: `/marketplace_listing/stubbed/accounts/{account_id}`
        public let path: String

        /// Get a subscription plan for an account (stubbed)
        ///
        /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed)
        public func get() -> Request<MarketplacePurchase> {
            .get(path)
        }
    }
}

extension Paths.MarketplaceListing.Stubbed {
    public var plans: Plans {
        Plans(path: path + "/plans")
    }

    public struct Plans {
        /// Path: `/marketplace_listing/stubbed/plans`
        public let path: String

        /// List plans (stubbed)
        ///
        /// Lists all plans that are part of your GitHub Marketplace listing.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-plans-stubbed)
        public func get() -> Request<[OctoKit.MarketplaceListingPlan]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.MarketplaceListing.Stubbed.Plans {
    public func planID(_ planID: String) -> WithPlanID {
        WithPlanID(path: path + "/" + planID)
    }

    public struct WithPlanID {
        /// Path: `/marketplace_listing/stubbed/plans/{plan_id}`
        public let path: String
    }
}

extension Paths.MarketplaceListing.Stubbed.Plans.WithPlanID {
    public var accounts: Accounts {
        Accounts(path: path + "/accounts")
    }

    public struct Accounts {
        /// Path: `/marketplace_listing/stubbed/plans/{plan_id}/accounts`
        public let path: String

        /// List accounts for a plan (stubbed)
        ///
        /// Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
        /// 
        /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed)
        public func get() -> Request<[OctoKit.MarketplacePurchase]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var meta: Meta {
        Meta(path: "/meta")
    }

    public struct Meta {
        /// Path: `/meta`
        public let path: String

        /// Get GitHub meta information
        ///
        /// Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
        /// 
        /// **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/meta#get-github-meta-information)
        public func get() -> Request<APIOverview> {
            .get(path)
        }
    }
}

extension Paths {
    public static var networks: Networks {
        Networks(path: "/networks")
    }

    public struct Networks {
        /// Path: `/networks`
        public let path: String
    }
}

extension Paths.Networks {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: path + "/" + owner)
    }

    public struct WithOwner {
        /// Path: `/networks/{owner}`
        public let path: String
    }
}

extension Paths.Networks.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: path + "/" + repo)
    }

    public struct WithRepo {
        /// Path: `/networks/{owner}/{repo}`
        public let path: String
    }
}

extension Paths.Networks.WithOwner.WithRepo {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/networks/{owner}/{repo}/events`
        public let path: String

        /// List public events for a network of repositories
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var notifications: Notifications {
        Notifications(path: "/notifications")
    }

    public struct Notifications {
        /// Path: `/notifications`
        public let path: String

        /// List notifications for the authenticated user
        ///
        /// List all notifications for the current user, sorted by most recently updated.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Thread]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Notifications {
    public var threads: Threads {
        Threads(path: path + "/threads")
    }

    public struct Threads {
        /// Path: `/notifications/threads`
        public let path: String
    }
}

extension Paths.Notifications.Threads {
    public func threadID(_ threadID: String) -> WithThreadID {
        WithThreadID(path: path + "/" + threadID)
    }

    public struct WithThreadID {
        /// Path: `/notifications/threads/{thread_id}`
        public let path: String

        /// Get a thread
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-thread)
        public func get() -> Request<Thread> {
            .get(path)
        }
    }
}

extension Paths.Notifications.Threads.WithThreadID {
    public var subscription: Subscription {
        Subscription(path: path + "/subscription")
    }

    public struct Subscription {
        /// Path: `/notifications/threads/{thread_id}/subscription`
        public let path: String

        /// Get a thread subscription for the authenticated user
        ///
        /// This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
        /// 
        /// Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user)
        public func get() -> Request<ThreadSubscription> {
            .get(path)
        }

        /// Delete a thread subscription
        ///
        /// Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var octocat: Octocat {
        Octocat(path: "/octocat")
    }

    public struct Octocat {
        /// Path: `/octocat`
        public let path: String


    }
}

extension Paths {
    public static var organizations: Organizations {
        Organizations(path: "/organizations")
    }

    public struct Organizations {
        /// Path: `/organizations`
        public let path: String

        /// List organizations
        ///
        /// Lists all organizations, in the order that they were created on GitHub.
        /// 
        /// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations)
        public func get() -> Request<[OctoKit.OrganizationSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Organizations {
    public func organizationID(_ organizationID: String) -> WithOrganizationID {
        WithOrganizationID(path: path + "/" + organizationID)
    }

    public struct WithOrganizationID {
        /// Path: `/organizations/{organization_id}`
        public let path: String
    }
}

extension Paths.Organizations.WithOrganizationID {
    public var customRoles: CustomRoles {
        CustomRoles(path: path + "/custom_roles")
    }

    public struct CustomRoles {
        /// Path: `/organizations/{organization_id}/custom_roles`
        public let path: String

        /// List custom repository roles in an organization
        ///
        /// List the custom repository roles available in this organization. In order to see custom
        /// repository roles in an organization, the authenticated user must be an organization owner.
        /// 
        /// For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-custom-repository-roles-in-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var customRoles: [OctoKit.OrganizationCustomRepositoryRole]?
            /// The number of custom roles in this organization
            public var totalCount: Int?

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.customRoles = try values.decodeIfPresent([OctoKit.OrganizationCustomRepositoryRole].self, forKey: "custom_roles")
                self.totalCount = try values.decodeIfPresent(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths {
    public static var orgs: Orgs {
        Orgs(path: "/orgs")
    }

    public struct Orgs {
        /// Path: `/orgs`
        public let path: String
    }
}

extension Paths.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: path + "/" + org)
    }

    public struct WithOrg {
        /// Path: `/orgs/{org}`
        public let path: String

        /// Get an organization
        ///
        /// To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
        /// 
        /// GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization)
        public func get() -> Request<OrganizationFull> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/orgs/{org}/actions`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/orgs/{org}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for an organization
        ///
        /// Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization)
        public func get() -> Request<ActionsOrganizationPermissions> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/permissions/repositories`
        public let path: String

        /// List selected repositories enabled for GitHub Actions in an organization
        ///
        /// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.Repository]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.Repository].self, forKey: "repositories")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/permissions/repositories/{repository_id}`
        public let path: String

        /// Disable a selected repository for GitHub Actions in an organization
        ///
        /// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/orgs/{org}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for an organization
        ///
        /// Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization)
        public func get() -> Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for an organization
        ///
        /// Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
        /// 
        /// If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
        /// 
        /// To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization)
        public func put(_ body: OctoKit.SelectedActions) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/orgs/{org}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var runnerGroups: [OctoKit.RunnerGroupsOrg]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runnerGroups = try values.decode([OctoKit.RunnerGroupsOrg].self, forKey: "runner_groups")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups {
    public func runnerGroupID(_ runnerGroupID: String) -> WithRunnerGroupID {
        WithRunnerGroupID(path: path + "/" + runnerGroupID)
    }

    public struct WithRunnerGroupID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}`
        public let path: String

        /// Get a self-hosted runner group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Gets a specific self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization)
        public func get() -> Request<RunnerGroupsOrg> {
            .get(path)
        }

        /// Delete a self-hosted runner group from an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Deletes a self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories`
        public let path: String

        /// List repository access to a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists the repositories with access to a self-hosted runner group configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.MinimalRepository]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.MinimalRepository].self, forKey: "repositories")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}`
        public let path: String

        /// Remove repository access to a self-hosted runner group in an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/runners`
        public let path: String

        /// List self-hosted runners in a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists self-hosted runners that are in a specific organization group.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var runners: [OctoKit.Runner]
            public var totalCount: Double

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runners = try values.decode([OctoKit.Runner].self, forKey: "runners")
                self.totalCount = try values.decode(Double.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.RunnerGroups.WithRunnerGroupID.Runners {
    public func runnerID(_ runnerID: String) -> WithRunnerID {
        WithRunnerID(path: path + "/" + runnerID)
    }

    public struct WithRunnerID {
        /// Path: `/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`
        public let path: String

        /// Remove a self-hosted runner from a group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// 
        /// Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/orgs/{org}/actions/runners`
        public let path: String

        /// List self-hosted runners for an organization
        ///
        /// Lists all self-hosted runners configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var runners: [OctoKit.Runner]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runners = try values.decode([OctoKit.Runner].self, forKey: "runners")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/orgs/{org}/actions/runners/downloads`
        public let path: String

        /// List runner applications for an organization
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization)
        public func get() -> Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/orgs/{org}/actions/runners/registration-token`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/orgs/{org}/actions/runners/remove-token`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg.Actions.Runners {
    public func runnerID(_ runnerID: String) -> WithRunnerID {
        WithRunnerID(path: path + "/" + runnerID)
    }

    public struct WithRunnerID {
        /// Path: `/orgs/{org}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for an organization
        ///
        /// Gets a specific self-hosted runner configured in an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization)
        public func get() -> Request<Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from an organization
        ///
        /// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/orgs/{org}/actions/secrets`
        public let path: String

        /// List organization secrets
        ///
        /// Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-organization-secrets)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var secrets: [OctoKit.OrganizationActionsSecret]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.secrets = try values.decode([OctoKit.OrganizationActionsSecret].self, forKey: "secrets")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/orgs/{org}/actions/secrets/public-key`
        public let path: String

        /// Get an organization public key
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-organization-public-key)
        public func get() -> Request<ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: path + "/" + secretName)
    }

    public struct WithSecretName {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}`
        public let path: String

        /// Get an organization secret
        ///
        /// Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-organization-secret)
        public func get() -> Request<OrganizationActionsSecret> {
            .get(path)
        }

        /// Delete an organization secret
        ///
        /// Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-organization-secret)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets.WithSecretName {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}/repositories`
        public let path: String

        /// List selected repositories for an organization secret
        ///
        /// Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.MinimalRepository]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.MinimalRepository].self, forKey: "repositories")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg.Actions.Secrets.WithSecretName.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`
        public let path: String

        /// Remove selected repository from an organization secret
        ///
        /// Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var auditLog: AuditLog {
        AuditLog(path: path + "/audit-log")
    }

    public struct AuditLog {
        /// Path: `/orgs/{org}/audit-log`
        public let path: String

        /// Get the audit log for an organization
        ///
        /// Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
        /// 
        /// To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-audit-log)
        public func get() -> Request<[OctoKit.AuditLogEvent]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var blocks: Blocks {
        Blocks(path: path + "/blocks")
    }

    public struct Blocks {
        /// Path: `/orgs/{org}/blocks`
        public let path: String

        /// List users blocked by an organization
        ///
        /// List the users blocked by an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Blocks {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/blocks/{username}`
        public let path: String

        /// Check if a user is blocked by an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Unblock a user from an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var credentialAuthorizations: CredentialAuthorizations {
        CredentialAuthorizations(path: path + "/credential-authorizations")
    }

    public struct CredentialAuthorizations {
        /// Path: `/orgs/{org}/credential-authorizations`
        public let path: String

        /// List SAML SSO authorizations for an organization
        ///
        /// Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
        /// 
        /// An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization)
        public func get() -> Request<[OctoKit.CredentialAuthorization]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.CredentialAuthorizations {
    public func credentialID(_ credentialID: String) -> WithCredentialID {
        WithCredentialID(path: path + "/" + credentialID)
    }

    public struct WithCredentialID {
        /// Path: `/orgs/{org}/credential-authorizations/{credential_id}`
        public let path: String

        /// Remove a SAML SSO authorization for an organization
        ///
        /// Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
        /// 
        /// An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/orgs/{org}/events`
        public let path: String

        /// List public organization events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-organization-events)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var externalGroup: ExternalGroup {
        ExternalGroup(path: path + "/external-group")
    }

    public struct ExternalGroup {
        /// Path: `/orgs/{org}/external-group`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.ExternalGroup {
    public func groupID(_ groupID: String) -> WithGroupID {
        WithGroupID(path: path + "/" + groupID)
    }

    public struct WithGroupID {
        /// Path: `/orgs/{org}/external-group/{group_id}`
        public let path: String

        /// Get an external group
        ///
        /// Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
        /// 
        /// You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#external-idp-group-info-for-an-organization)
        public func get() -> Request<OctoKit.ExternalGroup> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var externalGroups: ExternalGroups {
        ExternalGroups(path: path + "/external-groups")
    }

    public struct ExternalGroups {
        /// Path: `/orgs/{org}/external-groups`
        public let path: String

        /// List external groups in an organization
        ///
        /// Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
        /// 
        /// You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-external-idp-groups-for-an-organization)
        public func get() -> Request<OctoKit.ExternalGroups> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var failedInvitations: FailedInvitations {
        FailedInvitations(path: path + "/failed_invitations")
    }

    public struct FailedInvitations {
        /// Path: `/orgs/{org}/failed_invitations`
        public let path: String

        /// List failed organization invitations
        ///
        /// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations)
        public func get() -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var hooks: Hooks {
        Hooks(path: path + "/hooks")
    }

    public struct Hooks {
        /// Path: `/orgs/{org}/hooks`
        public let path: String

        /// List organization webhooks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-webhooks)
        public func get() -> Request<[OctoKit.OrgHook]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks {
    public func hookID(_ hookID: String) -> WithHookID {
        WithHookID(path: path + "/" + hookID)
    }

    public struct WithHookID {
        /// Path: `/orgs/{org}/hooks/{hook_id}`
        public let path: String

        /// Get an organization webhook
        ///
        /// Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization-webhook)
        public func get() -> Request<OrgHook> {
            .get(path)
        }

        /// Delete an organization webhook
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/orgs/{org}/hooks/{hook_id}/config`
        public let path: String

        /// Get a webhook configuration for an organization
        ///
        /// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
        /// 
        /// Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)
        public func get() -> Request<WebhookConfig> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries`
        public let path: String

        /// List deliveries for an organization webhook
        ///
        /// Returns a list of webhook deliveries for a webhook configured in an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook)
        public func get() -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID.Deliveries {
    public func deliveryID(_ deliveryID: String) -> WithDeliveryID {
        WithDeliveryID(path: path + "/" + deliveryID)
    }

    public struct WithDeliveryID {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}`
        public let path: String

        /// Get a webhook delivery for an organization webhook
        ///
        /// Returns a delivery for a webhook configured in an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook)
        public func get() -> Request<HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg.Hooks.WithHookID {
    public var pings: Pings {
        Pings(path: path + "/pings")
    }

    public struct Pings {
        /// Path: `/orgs/{org}/hooks/{hook_id}/pings`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/orgs/{org}/installation`
        public let path: String

        /// Get an organization installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the organization's installation information.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app)
        public func get() -> Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/orgs/{org}/installations`
        public let path: String

        /// List app installations for an organization
        ///
        /// Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var installations: [OctoKit.Installation]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.installations = try values.decode([OctoKit.Installation].self, forKey: "installations")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/orgs/{org}/interaction-limits`
        public let path: String

        /// Get interaction restrictions for an organization
        ///
        /// Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: InteractionLimitResponse?
            public var object: [String: AnyJSON]?

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(InteractionLimitResponse.self)
                self.object = try? container.decode([String: AnyJSON].self)
            }
        }

        /// Set interaction restrictions for an organization
        ///
        /// Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization)
        public func put(_ body: InteractionLimit) -> Request<InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions for an organization
        ///
        /// Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/orgs/{org}/invitations`
        public let path: String

        /// List pending organization invitations
        ///
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations)
        public func get() -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Invitations {
    public func invitationID(_ invitationID: String) -> WithInvitationID {
        WithInvitationID(path: path + "/" + invitationID)
    }

    public struct WithInvitationID {
        /// Path: `/orgs/{org}/invitations/{invitation_id}`
        public let path: String

        /// Cancel an organization invitation
        ///
        /// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
        /// 
        /// This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Invitations.WithInvitationID {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/invitations/{invitation_id}/teams`
        public let path: String

        /// List organization invitation teams
        ///
        /// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams)
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/orgs/{org}/issues`
        public let path: String

        /// List organization issues assigned to the authenticated user
        ///
        /// List issues in an organization assigned to the authenticated user.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user)
        public func get() -> Request<[OctoKit.Issue]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/orgs/{org}/members`
        public let path: String

        /// List organization members
        ///
        /// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-members)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Members {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/members/{username}`
        public let path: String

        /// Check organization membership for a user
        ///
        /// Check if a user is, publicly or privately, a member of the organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Remove an organization member
        ///
        /// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-an-organization-member)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/orgs/{org}/memberships`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/memberships/{username}`
        public let path: String

        /// Get organization membership for a user
        ///
        /// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user)
        public func get() -> Request<OrgMembership> {
            .get(path)
        }

        /// Remove organization membership for a user
        ///
        /// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
        /// 
        /// If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/orgs/{org}/migrations`
        public let path: String

        /// List organization migrations
        ///
        /// Lists the most recent migrations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-organization-migrations)
        public func get() -> Request<[OctoKit.Migration]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations {
    public func migrationID(_ migrationID: String) -> WithMigrationID {
        WithMigrationID(path: path + "/" + migrationID)
    }

    public struct WithMigrationID {
        /// Path: `/orgs/{org}/migrations/{migration_id}`
        public let path: String

        /// Get an organization migration status
        ///
        /// Fetches the status of a migration.
        /// 
        /// The `state` of a migration can be one of the following values:
        /// 
        /// *   `pending`, which means the migration hasn't started yet.
        /// *   `exporting`, which means the migration is in progress.
        /// *   `exported`, which means the migration finished successfully.
        /// *   `failed`, which means the migration failed.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-an-organization-migration-status)
        public func get() -> Request<Migration> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var archive: Archive {
        Archive(path: path + "/archive")
    }

    public struct Archive {
        /// Path: `/orgs/{org}/migrations/{migration_id}/archive`
        public let path: String

        /// Download an organization migration archive
        ///
        /// Fetches the URL to a migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#download-an-organization-migration-archive)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Delete an organization migration archive
        ///
        /// Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#delete-an-organization-migration-archive)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID.Repos {
    public func repoName(_ repoName: String) -> WithRepoName {
        WithRepoName(path: path + "/" + repoName)
    }

    public struct WithRepoName {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos/{repo_name}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID.Repos.WithRepoName {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock`
        public let path: String

        /// Unlock an organization repository
        ///
        /// Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#unlock-an-organization-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Migrations.WithMigrationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/orgs/{org}/migrations/{migration_id}/repositories`
        public let path: String

        /// List repositories in an organization migration
        ///
        /// List all the repositories for this organization migration.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var outsideCollaborators: OutsideCollaborators {
        OutsideCollaborators(path: path + "/outside_collaborators")
    }

    public struct OutsideCollaborators {
        /// Path: `/orgs/{org}/outside_collaborators`
        public let path: String

        /// List outside collaborators for an organization
        ///
        /// List all users who are outside collaborators of an organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.OutsideCollaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/outside_collaborators/{username}`
        public let path: String

        /// Remove outside collaborator from an organization
        ///
        /// Removing a user from this list will remove them from all the organization's repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/orgs/{org}/packages`
        public let path: String

        /// List packages for an organization
        ///
        /// Lists all packages in an organization readable by the user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-an-organization)
        public func get() -> Request<[OctoKit.Package]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: path + "/" + packageType)
    }

    public struct WithPackageType {
        /// Path: `/orgs/{org}/packages/{package_type}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: path + "/" + packageName)
    }

    public struct WithPackageName {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for an organization
        ///
        /// Gets a specific package in an organization.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization)
        public func get() -> Request<Package> {
            .get(path)
        }

        /// Delete a package for an organization
        ///
        /// Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/restore`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by an organization
        ///
        /// Returns all package versions for a package owned by an organization.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-an-organization)
        public func get() -> Request<[OctoKit.PackageVersion]> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: String) -> WithPackageVersionID {
        WithPackageVersionID(path: path + "/" + packageVersionID)
    }

    public struct WithPackageVersionID {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for an organization
        ///
        /// Gets a specific package version in an organization.
        /// 
        /// You must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization)
        public func get() -> Request<PackageVersion> {
            .get(path)
        }

        /// Delete package version for an organization
        ///
        /// Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String


    }
}

extension Paths.Orgs.WithOrg {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/orgs/{org}/projects`
        public let path: String

        /// List organization projects
        ///
        /// Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-organization-projects)
        public func get() -> Request<[OctoKit.Project]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var publicMembers: PublicMembers {
        PublicMembers(path: path + "/public_members")
    }

    public struct PublicMembers {
        /// Path: `/orgs/{org}/public_members`
        public let path: String

        /// List public organization members
        ///
        /// Members of an organization can choose to have their membership publicized or not.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-public-organization-members)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.PublicMembers {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/public_members/{username}`
        public let path: String

        /// Check public organization membership for a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Remove public organization membership for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/repos`
        public let path: String

        /// List organization repositories
        ///
        /// Lists repositories for the specified organization.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-organization-repositories)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var secretScanning: SecretScanning {
        SecretScanning(path: path + "/secret-scanning")
    }

    public struct SecretScanning {
        /// Path: `/orgs/{org}/secret-scanning`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.SecretScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/orgs/{org}/secret-scanning/alerts`
        public let path: String

        /// List secret scanning alerts by organization
        ///
        /// Lists all secret scanning alerts for all eligible repositories in an organization, from newest to oldest.
        /// To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-by-organization)
        public func get() -> Request<[OctoKit.OrganizationSecretScanningAlert]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/orgs/{org}/settings`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/orgs/{org}/settings/billing`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/orgs/{org}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for an organization
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization)
        public func get() -> Request<ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var advancedSecurity: AdvancedSecurity {
        AdvancedSecurity(path: path + "/advanced-security")
    }

    public struct AdvancedSecurity {
        /// Path: `/orgs/{org}/settings/billing/advanced-security`
        public let path: String

        /// Get GitHub Advanced Security active committers for an organization
        ///
        /// Gets the GitHub Advanced Security active committers for an organization per repository.
        /// Each distinct user login across all repositories is counted as a single Advanced Security seat, so the total_advanced_security_committers is not the sum of advanced_security_committers for each repository.
        /// If this organization defers to an enterprise for billing, the total_advanced_security_committers returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization)
        public func get() -> Request<AdvancedSecurityActiveCommitters> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/orgs/{org}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for an organization
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization)
        public func get() -> Request<PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/orgs/{org}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for an organization
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `repo` or `admin:org` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization)
        public func get() -> Request<CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/orgs/{org}/team-sync`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.TeamSync {
    public var groups: Groups {
        Groups(path: path + "/groups")
    }

    public struct Groups {
        /// Path: `/orgs/{org}/team-sync/groups`
        public let path: String

        /// List IdP groups for an organization
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization)
        public func get() -> Request<GroupMapping> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/teams`
        public let path: String

        /// List teams
        ///
        /// Lists all teams in an organization that are visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-teams)
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams {
    public func teamSlug(_ teamSlug: String) -> WithTeamSlug {
        WithTeamSlug(path: path + "/" + teamSlug)
    }

    public struct WithTeamSlug {
        /// Path: `/orgs/{org}/teams/{team_slug}`
        public let path: String

        /// Get a team by name
        ///
        /// Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-team-by-name)
        public func get() -> Request<TeamFull> {
            .get(path)
        }

        /// Delete a team
        ///
        /// To delete a team, the authenticated user must be an organization owner or team maintainer.
        /// 
        /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-team)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var discussions: Discussions {
        Discussions(path: path + "/discussions")
    }

    public struct Discussions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions`
        public let path: String

        /// List discussions
        ///
        /// List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussions)
        public func get() -> Request<[OctoKit.TeamDiscussion]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions {
    public func discussionNumber(_ discussionNumber: String) -> WithDiscussionNumber {
        WithDiscussionNumber(path: path + "/" + discussionNumber)
    }

    public struct WithDiscussionNumber {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`
        public let path: String

        /// Get a discussion
        ///
        /// Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion)
        public func get() -> Request<TeamDiscussion> {
            .get(path)
        }

        /// Delete a discussion
        ///
        /// Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`
        public let path: String

        /// List discussion comments
        ///
        /// List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussion-comments)
        public func get() -> Request<[OctoKit.TeamDiscussionComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments {
    public func commentNumber(_ commentNumber: String) -> WithCommentNumber {
        WithCommentNumber(path: path + "/" + commentNumber)
    }

    public struct WithCommentNumber {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`
        public let path: String

        /// Get a discussion comment
        ///
        /// Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-comment)
        public func get() -> Request<TeamDiscussionComment> {
            .get(path)
        }

        /// Delete a discussion comment
        ///
        /// Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments.WithCommentNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions`
        public let path: String

        /// List reactions for a team discussion comment
        ///
        /// List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Comments.WithCommentNumber.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete team discussion comment reaction
        ///
        /// **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions`
        public let path: String

        /// List reactions for a team discussion
        ///
        /// List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Discussions.WithDiscussionNumber.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete team discussion reaction
        ///
        /// **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var externalGroups: ExternalGroups {
        ExternalGroups(path: path + "/external-groups")
    }

    public struct ExternalGroups {
        /// Path: `/orgs/{org}/teams/{team_slug}/external-groups`
        public let path: String

        /// Remove the connection between an external group and a team
        ///
        /// Deletes a connection between a team and an external group.
        /// 
        /// You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#unlink-external-idp-group-team-connection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/orgs/{org}/teams/{team_slug}/invitations`
        public let path: String

        /// List pending team invitations
        ///
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-pending-team-invitations)
        public func get() -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/orgs/{org}/teams/{team_slug}/members`
        public let path: String

        /// List team members
        ///
        /// Team members will include the members of child teams.
        /// 
        /// To list members in a team, the team must be visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-members)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/orgs/{org}/teams/{team_slug}/memberships`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/orgs/{org}/teams/{team_slug}/memberships/{username}`
        public let path: String

        /// Get team membership for a user
        ///
        /// Team members will include the members of child teams.
        /// 
        /// To get a user's membership with a team, the team must be visible to the authenticated user.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        /// 
        /// **Note:**
        /// The response contains the `state` of the membership and the member's `role`.
        /// 
        /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user)
        public func get() -> Request<TeamMembership> {
            .get(path)
        }

        /// Remove team membership for a user
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/orgs/{org}/teams/{team_slug}/projects`
        public let path: String

        /// List team projects
        ///
        /// Lists the organization projects for a team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-projects)
        public func get() -> Request<[OctoKit.TeamProject]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Projects {
    public func projectID(_ projectID: String) -> WithProjectID {
        WithProjectID(path: path + "/" + projectID)
    }

    public struct WithProjectID {
        /// Path: `/orgs/{org}/teams/{team_slug}/projects/{project_id}`
        public let path: String

        /// Check team permissions for a project
        ///
        /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project)
        public func get() -> Request<TeamProject> {
            .get(path)
        }

        /// Remove a project from a team
        ///
        /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos`
        public let path: String

        /// List team repositories
        ///
        /// Lists a team's repositories visible to the authenticated user.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-repositories)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: path + "/" + owner)
    }

    public struct WithOwner {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos/{owner}`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: path + "/" + repo)
    }

    public struct WithRepo {
        /// Path: `/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`
        public let path: String

        /// Check team permissions for a repository
        ///
        /// Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
        /// 
        /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
        /// 
        /// If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository)
        public func get() -> Request<TeamRepository> {
            .get(path)
        }

        /// Remove a repository from a team
        ///
        /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/orgs/{org}/teams/{team_slug}/team-sync`
        public let path: String
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.TeamSync {
    public var groupMappings: GroupMappings {
        GroupMappings(path: path + "/group-mappings")
    }

    public struct GroupMappings {
        /// Path: `/orgs/{org}/teams/{team_slug}/team-sync/group-mappings`
        public let path: String

        /// List IdP groups for a team
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups connected to a team on GitHub.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team)
        public func get() -> Request<GroupMapping> {
            .get(path)
        }
    }
}

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/orgs/{org}/teams/{team_slug}/teams`
        public let path: String

        /// List child teams
        ///
        /// Lists the child teams of the team specified by `{team_slug}`.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-child-teams)
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var projects: Projects {
        Projects(path: "/projects")
    }

    public struct Projects {
        /// Path: `/projects`
        public let path: String
    }
}

extension Paths.Projects {
    public var columns: Columns {
        Columns(path: path + "/columns")
    }

    public struct Columns {
        /// Path: `/projects/columns`
        public let path: String
    }
}

extension Paths.Projects.Columns {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/projects/columns/cards`
        public let path: String
    }
}

extension Paths.Projects.Columns.Cards {
    public func cardID(_ cardID: String) -> WithCardID {
        WithCardID(path: path + "/" + cardID)
    }

    public struct WithCardID {
        /// Path: `/projects/columns/cards/{card_id}`
        public let path: String

        /// Get a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project-card)
        public func get() -> Request<ProjectCard> {
            .get(path)
        }

        /// Delete a project card
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project-card)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.Columns.Cards.WithCardID {
    public var moves: Moves {
        Moves(path: path + "/moves")
    }

    public struct Moves {
        /// Path: `/projects/columns/cards/{card_id}/moves`
        public let path: String


    }
}

extension Paths.Projects.Columns {
    public func columnID(_ columnID: String) -> WithColumnID {
        WithColumnID(path: path + "/" + columnID)
    }

    public struct WithColumnID {
        /// Path: `/projects/columns/{column_id}`
        public let path: String

        /// Get a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project-column)
        public func get() -> Request<ProjectColumn> {
            .get(path)
        }

        /// Delete a project column
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project-column)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.Columns.WithColumnID {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/projects/columns/{column_id}/cards`
        public let path: String

        /// List project cards
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-cards)
        public func get() -> Request<[OctoKit.ProjectCard]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Projects.Columns.WithColumnID {
    public var moves: Moves {
        Moves(path: path + "/moves")
    }

    public struct Moves {
        /// Path: `/projects/columns/{column_id}/moves`
        public let path: String


    }
}

extension Paths.Projects {
    public func projectID(_ projectID: String) -> WithProjectID {
        WithProjectID(path: path + "/" + projectID)
    }

    public struct WithProjectID {
        /// Path: `/projects/{project_id}`
        public let path: String

        /// Get a project
        ///
        /// Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-a-project)
        public func get() -> Request<Project> {
            .get(path)
        }

        /// Delete a project
        ///
        /// Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#delete-a-project)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.WithProjectID {
    public var collaborators: Collaborators {
        Collaborators(path: path + "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/projects/{project_id}/collaborators`
        public let path: String

        /// List project collaborators
        ///
        /// Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-collaborators)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Projects.WithProjectID.Collaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/projects/{project_id}/collaborators/{username}`
        public let path: String

        /// Remove user as a collaborator
        ///
        /// Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#remove-project-collaborator)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.WithProjectID.Collaborators.WithUsername {
    public var permission: Permission {
        Permission(path: path + "/permission")
    }

    public struct Permission {
        /// Path: `/projects/{project_id}/collaborators/{username}/permission`
        public let path: String

        /// Get project permission for a user
        ///
        /// Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user)
        public func get() -> Request<ProjectCollaboratorPermission> {
            .get(path)
        }
    }
}

extension Paths.Projects.WithProjectID {
    public var columns: Columns {
        Columns(path: path + "/columns")
    }

    public struct Columns {
        /// Path: `/projects/{project_id}/columns`
        public let path: String

        /// List project columns
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-project-columns)
        public func get() -> Request<[OctoKit.ProjectColumn]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var rateLimit: RateLimit {
        RateLimit(path: "/rate_limit")
    }

    public struct RateLimit {
        /// Path: `/rate_limit`
        public let path: String

        /// Get rate limit status for the authenticated user
        ///
        /// **Note:** Accessing this endpoint does not count against your REST API rate limit.
        /// 
        /// **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user)
        public func get() -> Request<RateLimitOverview> {
            .get(path)
        }

        public enum GetHeaders {
            public static let rateLimitLimit = HTTPHeader<Int>(field: "X-RateLimit-Limit")
            public static let rateLimitRemaining = HTTPHeader<Int>(field: "X-RateLimit-Remaining")
            public static let rateLimitReset = HTTPHeader<Int>(field: "X-RateLimit-Reset")
        }
    }
}

extension Paths {
    public static var reactions: Reactions {
        Reactions(path: "/reactions")
    }

    public struct Reactions {
        /// Path: `/reactions`
        public let path: String
    }
}

extension Paths.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/reactions/{reaction_id}`
        public let path: String

        /// Delete a reaction (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
        /// 
        /// OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var repos: Repos {
        Repos(path: "/repos")
    }

    public struct Repos {
        /// Path: `/repos`
        public let path: String
    }
}

extension Paths.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: path + "/" + owner)
    }

    public struct WithOwner {
        /// Path: `/repos/{owner}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: path + "/" + repo)
    }

    public struct WithRepo {
        /// Path: `/repos/{owner}/{repo}`
        public let path: String

        /// Get a repository
        ///
        /// The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository)
        public func get() -> Request<FullRepository> {
            .get(path)
        }

        /// Delete a repository
        ///
        /// Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
        /// 
        /// If an organization owner has configured the organization to prevent members from deleting organization-owned
        /// repositories, you will get a `403 Forbidden` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/repos/{owner}/{repo}/actions`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts`
        public let path: String

        /// List artifacts for a repository
        ///
        /// Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var artifacts: [OctoKit.Artifact]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.artifacts = try values.decode([OctoKit.Artifact].self, forKey: "artifacts")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Artifacts {
    public func artifactID(_ artifactID: String) -> WithArtifactID {
        WithArtifactID(path: path + "/" + artifactID)
    }

    public struct WithArtifactID {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts/{artifact_id}`
        public let path: String

        /// Get an artifact
        ///
        /// Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-artifact)
        public func get() -> Request<Artifact> {
            .get(path)
        }

        /// Delete an artifact
        ///
        /// Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-artifact)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Artifacts.WithArtifactID {
    public func archiveFormat(_ archiveFormat: String) -> WithArchiveFormat {
        WithArchiveFormat(path: path + "/" + archiveFormat)
    }

    public struct WithArchiveFormat {
        /// Path: `/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`
        public let path: String

        /// Download an artifact
        ///
        /// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
        /// the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
        /// the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        /// GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-an-artifact)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/jobs`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Jobs {
    public func jobID(_ jobID: String) -> WithJobID {
        WithJobID(path: path + "/" + jobID)
    }

    public struct WithJobID {
        /// Path: `/repos/{owner}/{repo}/actions/jobs/{job_id}`
        public let path: String

        /// Get a job for a workflow run
        ///
        /// Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run)
        public func get() -> Request<Job> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Jobs.WithJobID {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/jobs/{job_id}/logs`
        public let path: String

        /// Download job logs for a workflow run
        ///
        /// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
        /// for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
        /// use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
        /// have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/repos/{owner}/{repo}/actions/permissions`
        public let path: String

        /// Get GitHub Actions permissions for a repository
        ///
        /// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository)
        public func get() -> Request<ActionsRepositoryPermissions> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Permissions {
    public var selectedActions: SelectedActions {
        SelectedActions(path: path + "/selected-actions")
    }

    public struct SelectedActions {
        /// Path: `/repos/{owner}/{repo}/actions/permissions/selected-actions`
        public let path: String

        /// Get allowed actions for a repository
        ///
        /// Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository)
        public func get() -> Request<OctoKit.SelectedActions> {
            .get(path)
        }

        /// Set allowed actions for a repository
        ///
        /// Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
        /// 
        /// If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
        /// 
        /// To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository)
        public func put(_ body: OctoKit.SelectedActions) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var runners: Runners {
        Runners(path: path + "/runners")
    }

    public struct Runners {
        /// Path: `/repos/{owner}/{repo}/actions/runners`
        public let path: String

        /// List self-hosted runners for a repository
        ///
        /// Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var runners: [OctoKit.Runner]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.runners = try values.decode([OctoKit.Runner].self, forKey: "runners")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var downloads: Downloads {
        Downloads(path: path + "/downloads")
    }

    public struct Downloads {
        /// Path: `/repos/{owner}/{repo}/actions/runners/downloads`
        public let path: String

        /// List runner applications for a repository
        ///
        /// Lists binaries for the runner application that you can download and run.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository)
        public func get() -> Request<[OctoKit.RunnerApplication]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var registrationToken: RegistrationToken {
        RegistrationToken(path: path + "/registration-token")
    }

    public struct RegistrationToken {
        /// Path: `/repos/{owner}/{repo}/actions/runners/registration-token`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public var removeToken: RemoveToken {
        RemoveToken(path: path + "/remove-token")
    }

    public struct RemoveToken {
        /// Path: `/repos/{owner}/{repo}/actions/runners/remove-token`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runners {
    public func runnerID(_ runnerID: String) -> WithRunnerID {
        WithRunnerID(path: path + "/" + runnerID)
    }

    public struct WithRunnerID {
        /// Path: `/repos/{owner}/{repo}/actions/runners/{runner_id}`
        public let path: String

        /// Get a self-hosted runner for a repository
        ///
        /// Gets a specific self-hosted runner configured in a repository.
        /// 
        /// You must authenticate using an access token with the `repo` scope to use this
        /// endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository)
        public func get() -> Request<Runner> {
            .get(path)
        }

        /// Delete a self-hosted runner from a repository
        ///
        /// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        /// 
        /// You must authenticate using an access token with the `repo`
        /// scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var runs: Runs {
        Runs(path: path + "/runs")
    }

    public struct Runs {
        /// Path: `/repos/{owner}/{repo}/actions/runs`
        public let path: String

        /// List workflow runs for a repository
        ///
        /// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflowRuns: [OctoKit.WorkflowRun]

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.workflowRuns = try values.decode([OctoKit.WorkflowRun].self, forKey: "workflow_runs")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs {
    public func runID(_ runID: String) -> WithRunID {
        WithRunID(path: path + "/" + runID)
    }

    public struct WithRunID {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}`
        public let path: String

        /// Get a workflow run
        ///
        /// Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow-run)
        public func get() -> Request<WorkflowRun> {
            .get(path)
        }

        /// Delete a workflow run
        ///
        /// Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
        /// private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
        /// this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-workflow-run)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var approvals: Approvals {
        Approvals(path: path + "/approvals")
    }

    public struct Approvals {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/approvals`
        public let path: String

        /// Get the review history for a workflow run
        ///
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run)
        public func get() -> Request<[OctoKit.EnvironmentApprovals]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var approve: Approve {
        Approve(path: path + "/approve")
    }

    public struct Approve {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/approve`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`
        public let path: String

        /// List workflow run artifacts
        ///
        /// Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var artifacts: [OctoKit.Artifact]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.artifacts = try values.decode([OctoKit.Artifact].self, forKey: "artifacts")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts {
    public func attemptNumber(_ attemptNumber: String) -> WithAttemptNumber {
        WithAttemptNumber(path: path + "/" + attemptNumber)
    }

    public struct WithAttemptNumber {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}`
        public let path: String

        /// Get a workflow run attempt
        ///
        /// Gets a specific workflow run attempt. Anyone with read access to the repository
        /// can use this endpoint. If the repository is private you must use an access token
        /// with the `repo` scope. GitHub Apps must have the `actions:read` permission to
        /// use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt)
        public func get() -> Request<WorkflowRun> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts.WithAttemptNumber {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs`
        public let path: String

        /// List jobs for a workflow run attempt
        ///
        /// Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var jobs: [OctoKit.Job]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.jobs = try values.decode([OctoKit.Job].self, forKey: "jobs")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID.Attempts.WithAttemptNumber {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs`
        public let path: String

        /// Download workflow run attempt logs
        ///
        /// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
        /// 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
        /// the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        /// GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var cancel: Cancel {
        Cancel(path: path + "/cancel")
    }

    public struct Cancel {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/cancel`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var jobs: Jobs {
        Jobs(path: path + "/jobs")
    }

    public struct Jobs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/jobs`
        public let path: String

        /// List jobs for a workflow run
        ///
        /// Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var jobs: [OctoKit.Job]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.jobs = try values.decode([OctoKit.Job].self, forKey: "jobs")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var logs: Logs {
        Logs(path: path + "/logs")
    }

    public struct Logs {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/logs`
        public let path: String

        /// Download workflow run logs
        ///
        /// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
        /// `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
        /// this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
        /// the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#download-workflow-run-logs)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Delete workflow run logs
        ///
        /// Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-workflow-run-logs)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var pendingDeployments: PendingDeployments {
        PendingDeployments(path: path + "/pending_deployments")
    }

    public struct PendingDeployments {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`
        public let path: String

        /// Get pending deployments for a workflow run
        ///
        /// Get all deployment environments for a workflow run that are waiting for protection rules to pass.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run)
        public func get() -> Request<[OctoKit.PendingDeployment]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var rerun: Rerun {
        Rerun(path: path + "/rerun")
    }

    public struct Rerun {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/rerun`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Runs.WithRunID {
    public var timing: Timing {
        Timing(path: path + "/timing")
    }

    public struct Timing {
        /// Path: `/repos/{owner}/{repo}/actions/runs/{run_id}/timing`
        public let path: String

        /// Get workflow run usage
        ///
        /// Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-workflow-run-usage)
        public func get() -> Request<WorkflowRunUsage> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/repos/{owner}/{repo}/actions/secrets`
        public let path: String

        /// List repository secrets
        ///
        /// Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-secrets)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var secrets: [OctoKit.ActionsSecret]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.secrets = try values.decode([OctoKit.ActionsSecret].self, forKey: "secrets")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/repos/{owner}/{repo}/actions/secrets/public-key`
        public let path: String

        /// Get a repository public key
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-repository-public-key)
        public func get() -> Request<ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: path + "/" + secretName)
    }

    public struct WithSecretName {
        /// Path: `/repos/{owner}/{repo}/actions/secrets/{secret_name}`
        public let path: String

        /// Get a repository secret
        ///
        /// Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-repository-secret)
        public func get() -> Request<ActionsSecret> {
            .get(path)
        }

        /// Delete a repository secret
        ///
        /// Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-a-repository-secret)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions {
    public var workflows: Workflows {
        Workflows(path: path + "/workflows")
    }

    public struct Workflows {
        /// Path: `/repos/{owner}/{repo}/actions/workflows`
        public let path: String

        /// List repository workflows
        ///
        /// Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-repository-workflows)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflows: [OctoKit.Workflow]

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.workflows = try values.decode([OctoKit.Workflow].self, forKey: "workflows")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows {
    public func workflowID(_ workflowID: String) -> WithWorkflowID {
        WithWorkflowID(path: path + "/" + workflowID)
    }

    public struct WithWorkflowID {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}`
        public let path: String

        /// Get a workflow
        ///
        /// Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-a-workflow)
        public func get() -> Request<Workflow> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var disable: Disable {
        Disable(path: path + "/disable")
    }

    public struct Disable {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var dispatches: Dispatches {
        Dispatches(path: path + "/dispatches")
    }

    public struct Dispatches {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var enable: Enable {
        Enable(path: path + "/enable")
    }

    public struct Enable {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var runs: Runs {
        Runs(path: path + "/runs")
    }

    public struct Runs {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`
        public let path: String

        /// List workflow runs
        ///
        /// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-workflow-runs)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var workflowRuns: [OctoKit.WorkflowRun]

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
                self.workflowRuns = try values.decode([OctoKit.WorkflowRun].self, forKey: "workflow_runs")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Actions.Workflows.WithWorkflowID {
    public var timing: Timing {
        Timing(path: path + "/timing")
    }

    public struct Timing {
        /// Path: `/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing`
        public let path: String

        /// Get workflow usage
        ///
        /// Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-workflow-usage)
        public func get() -> Request<WorkflowUsage> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var assignees: Assignees {
        Assignees(path: path + "/assignees")
    }

    public struct Assignees {
        /// Path: `/repos/{owner}/{repo}/assignees`
        public let path: String

        /// List assignees
        ///
        /// Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-assignees)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Assignees {
    public func assignee(_ assignee: String) -> WithAssignee {
        WithAssignee(path: path + "/" + assignee)
    }

    public struct WithAssignee {
        /// Path: `/repos/{owner}/{repo}/assignees/{assignee}`
        public let path: String

        /// Check if a user can be assigned
        ///
        /// Checks if a user has permission to be assigned to an issue in this repository.
        /// 
        /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
        /// 
        /// Otherwise a `404` status code is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var autolinks: Autolinks {
        Autolinks(path: path + "/autolinks")
    }

    public struct Autolinks {
        /// Path: `/repos/{owner}/{repo}/autolinks`
        public let path: String

        /// List all autolinks of a repository
        ///
        /// This returns a list of autolinks configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#list-autolinks)
        public func get() -> Request<[OctoKit.Autolink]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Autolinks {
    public func autolinkID(_ autolinkID: String) -> WithAutolinkID {
        WithAutolinkID(path: path + "/" + autolinkID)
    }

    public struct WithAutolinkID {
        /// Path: `/repos/{owner}/{repo}/autolinks/{autolink_id}`
        public let path: String

        /// Get an autolink reference of a repository
        ///
        /// This returns a single autolink reference by ID that was configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#get-autolink)
        public func get() -> Request<Autolink> {
            .get(path)
        }

        /// Delete an autolink reference from a repository
        ///
        /// This deletes a single autolink reference by ID that was configured for the given repository.
        /// 
        /// Information about autolinks are only available to repository administrators.
        ///
        /// [API method documentation](https://docs.github.com/v3/repos#delete-autolink)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var automatedSecurityFixes: AutomatedSecurityFixes {
        AutomatedSecurityFixes(path: path + "/automated-security-fixes")
    }

    public struct AutomatedSecurityFixes {
        /// Path: `/repos/{owner}/{repo}/automated-security-fixes`
        public let path: String

        /// Disable automated security fixes
        ///
        /// Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-automated-security-fixes)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var branches: Branches {
        Branches(path: path + "/branches")
    }

    public struct Branches {
        /// Path: `/repos/{owner}/{repo}/branches`
        public let path: String

        /// List branches
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-branches)
        public func get() -> Request<[OctoKit.ShortBranch]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches {
    public func branch(_ branch: String) -> WithBranch {
        WithBranch(path: path + "/" + branch)
    }

    public struct WithBranch {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}`
        public let path: String

        /// Get a branch
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-branch)
        public func get() -> Request<BranchWithProtection> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch {
    public var protection: Protection {
        Protection(path: path + "/protection")
    }

    public struct Protection {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection`
        public let path: String

        /// Get branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-branch-protection)
        public func get() -> Request<BranchProtection> {
            .get(path)
        }

        /// Delete branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-branch-protection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var enforceAdmins: EnforceAdmins {
        EnforceAdmins(path: path + "/enforce_admins")
    }

    public struct EnforceAdmins {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`
        public let path: String

        /// Get admin branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-admin-branch-protection)
        public func get() -> Request<ProtectedBranchAdminEnforced> {
            .get(path)
        }

        /// Delete admin branch protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-admin-branch-protection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredPullRequestReviews: RequiredPullRequestReviews {
        RequiredPullRequestReviews(path: path + "/required_pull_request_reviews")
    }

    public struct RequiredPullRequestReviews {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`
        public let path: String

        /// Get pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-pull-request-review-protection)
        public func get() -> Request<ProtectedBranchPullRequestReview> {
            .get(path)
        }

        /// Delete pull request review protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredSignatures: RequiredSignatures {
        RequiredSignatures(path: path + "/required_signatures")
    }

    public struct RequiredSignatures {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`
        public let path: String

        /// Get commit signature protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
        /// 
        /// **Note**: You must enable branch protection to require signed commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-commit-signature-protection)
        public func get() -> Request<ProtectedBranchAdminEnforced> {
            .get(path)
        }

        /// Delete commit signature protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-commit-signature-protection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var requiredStatusChecks: RequiredStatusChecks {
        RequiredStatusChecks(path: path + "/required_status_checks")
    }

    public struct RequiredStatusChecks {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`
        public let path: String

        /// Get status checks protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-status-checks-protection)
        public func get() -> Request<StatusCheckPolicy> {
            .get(path)
        }

        /// Remove status check protection
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-status-check-protection)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.RequiredStatusChecks {
    public var contexts: Contexts {
        Contexts(path: path + "/contexts")
    }

    public struct Contexts {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`
        public let path: String

        /// Get all status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-status-check-contexts)
        public func get() -> Request<[String]> {
            .get(path)
        }

        /// Remove status check contexts
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-status-check-contexts)
        public func delete() -> Request<[String]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection {
    public var restrictions: Restrictions {
        Restrictions(path: path + "/restrictions")
    }

    public struct Restrictions {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions`
        public let path: String

        /// Get access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists who has access to this protected branch.
        /// 
        /// **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-access-restrictions)
        public func get() -> Request<BranchRestrictionPolicy> {
            .get(path)
        }

        /// Delete access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Disables the ability to restrict who can push to this branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-access-restrictions)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var apps: Apps {
        Apps(path: path + "/apps")
    }

    public struct Apps {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`
        public let path: String

        /// Get apps with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-apps-with-access-to-the-protected-branch)
        public func get() -> Request<[OctoKit.Integration]> {
            .get(path)
        }

        /// Remove app access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        /// 
        /// | Type    | Description                                                                                                                                                |
        /// | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-app-access-restrictions)
        public func delete() -> Request<[OctoKit.Integration]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`
        public let path: String

        /// Get teams with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the teams who have push access to this branch. The list includes child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-teams-with-access-to-the-protected-branch)
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        /// Remove team access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of a team to push to this branch. You can also remove push access for child teams.
        /// 
        /// | Type    | Description                                                                                                                                         |
        /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-team-access-restrictions)
        public func delete() -> Request<[OctoKit.Team]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch.Protection.Restrictions {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`
        public let path: String

        /// Get users with access to the protected branch
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists the people who have push access to this branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        /// Remove user access restrictions
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Removes the ability of a user to push to this branch.
        /// 
        /// | Type    | Description                                                                                                                                   |
        /// | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
        /// | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-user-access-restrictions)
        public func delete() -> Request<[OctoKit.SimpleUser]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Branches.WithBranch {
    public var rename: Rename {
        Rename(path: path + "/rename")
    }

    public struct Rename {
        /// Path: `/repos/{owner}/{repo}/branches/{branch}/rename`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/check-runs`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns {
    public func checkRunID(_ checkRunID: String) -> WithCheckRunID {
        WithCheckRunID(path: path + "/" + checkRunID)
    }

    public struct WithCheckRunID {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}`
        public let path: String

        /// Get a check run
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#get-a-check-run)
        public func get() -> Request<CheckRun> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns.WithCheckRunID {
    public var annotations: Annotations {
        Annotations(path: path + "/annotations")
    }

    public struct Annotations {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`
        public let path: String

        /// List check run annotations
        ///
        /// Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-run-annotations)
        public func get() -> Request<[OctoKit.CheckAnnotation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckRuns.WithCheckRunID {
    public var rerequest: Rerequest {
        Rerequest(path: path + "/rerequest")
    }

    public struct Rerequest {
        /// Path: `/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var checkSuites: CheckSuites {
        CheckSuites(path: path + "/check-suites")
    }

    public struct CheckSuites {
        /// Path: `/repos/{owner}/{repo}/check-suites`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites {
    public var preferences: Preferences {
        Preferences(path: path + "/preferences")
    }

    public struct Preferences {
        /// Path: `/repos/{owner}/{repo}/check-suites/preferences`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites {
    public func checkSuiteID(_ checkSuiteID: String) -> WithCheckSuiteID {
        WithCheckSuiteID(path: path + "/" + checkSuiteID)
    }

    public struct WithCheckSuiteID {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}`
        public let path: String

        /// Get a check suite
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
        /// 
        /// Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#get-a-check-suite)
        public func get() -> Request<CheckSuite> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites.WithCheckSuiteID {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`
        public let path: String

        /// List check runs in a check suite
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var checkRuns: [OctoKit.CheckRun]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.checkRuns = try values.decode([OctoKit.CheckRun].self, forKey: "check_runs")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CheckSuites.WithCheckSuiteID {
    public var rerequest: Rerequest {
        Rerequest(path: path + "/rerequest")
    }

    public struct Rerequest {
        /// Path: `/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var codeScanning: CodeScanning {
        CodeScanning(path: path + "/code-scanning")
    }

    public struct CodeScanning {
        /// Path: `/repos/{owner}/{repo}/code-scanning`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts`
        public let path: String

        /// List code scanning alerts for a repository
        ///
        /// Lists all open code scanning alerts for the default branch (usually `main`
        /// or `master`). You must use an access token with the `security_events` scope to use
        /// this endpoint. GitHub Apps must have the `security_events` read permission to use
        /// this endpoint.
        /// 
        /// The response includes a `most_recent_instance` object.
        /// This provides details of the most recent instance of this alert
        /// for the default branch or for the specified Git reference
        /// (if you used `ref` in the request).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)
        public func get() -> Request<[OctoKit.CodeScanningAlertItems]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Alerts {
    public func alertNumber(_ alertNumber: String) -> WithAlertNumber {
        WithAlertNumber(path: path + "/" + alertNumber)
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a code scanning alert
        ///
        /// Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// **Deprecation notice**:
        /// The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert)
        public func get() -> Request<CodeScanningAlert> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Alerts.WithAlertNumber {
    public var instances: Instances {
        Instances(path: path + "/instances")
    }

    public struct Instances {
        /// Path: `/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances`
        public let path: String

        /// List instances of a code scanning alert
        ///
        /// Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert)
        public func get() -> Request<[OctoKit.CodeScanningAlertInstance]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var analyses: Analyses {
        Analyses(path: path + "/analyses")
    }

    public struct Analyses {
        /// Path: `/repos/{owner}/{repo}/code-scanning/analyses`
        public let path: String

        /// List code scanning analyses for a repository
        ///
        /// Lists the details of all code scanning analyses for a repository,
        /// starting with the most recent.
        /// The response is paginated and you can use the `page` and `per_page` parameters
        /// to list the analyses you're interested in.
        /// By default 30 analyses are listed per page.
        /// 
        /// The `rules_count` field in the response give the number of rules
        /// that were run in the analysis.
        /// For very old analyses this data is not available,
        /// and `0` is returned in this field.
        /// 
        /// You must use an access token with the `security_events` scope to use this endpoint.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// **Deprecation notice**:
        /// The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository)
        public func get() -> Request<[OctoKit.CodeScanningAnalysis]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Analyses {
    public func analysisID(_ analysisID: String) -> WithAnalysisID {
        WithAnalysisID(path: path + "/" + analysisID)
    }

    public struct WithAnalysisID {
        /// Path: `/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}`
        public let path: String

        /// Get a code scanning analysis for a repository
        ///
        /// Gets a specified code scanning analysis for a repository.
        /// You must use an access token with the `security_events` scope to use this endpoint.
        /// GitHub Apps must have the `security_events` read permission to use this endpoint.
        /// 
        /// The default JSON response contains fields that describe the analysis.
        /// This includes the Git reference and commit SHA to which the analysis relates,
        /// the datetime of the analysis, the name of the code scanning tool,
        /// and the number of alerts.
        /// 
        /// The `rules_count` field in the default response give the number of rules
        /// that were run in the analysis.
        /// For very old analyses this data is not available,
        /// and `0` is returned in this field.
        /// 
        /// If you use the Accept header `application/sarif+json`,
        /// the response contains the analysis data that was uploaded.
        /// This is formatted as
        /// [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)
        public func get() -> Request<CodeScanningAnalysis> {
            .get(path)
        }

        /// Delete a code scanning analysis from a repository
        ///
        /// Deletes a specified code scanning analysis from a repository. For
        /// private repositories, you must use an access token with the `repo` scope. For public repositories,
        /// you must use an access token with `public_repo` and `repo:security_events` scopes.
        /// GitHub Apps must have the `security_events` write permission to use this endpoint.
        /// 
        /// You can delete one analysis at a time.
        /// To delete a series of analyses, start with the most recent analysis and work backwards.
        /// Conceptually, the process is similar to the undo function in a text editor.
        /// 
        /// When you list the analyses for a repository,
        /// one or more will be identified as deletable in the response:
        /// 
        /// ```
        /// "deletable": true
        /// ```
        /// 
        /// An analysis is deletable when it's the most recent in a set of analyses.
        /// Typically, a repository will have multiple sets of analyses
        /// for each enabled code scanning tool,
        /// where a set is determined by a unique combination of analysis values:
        /// 
        /// * `ref`
        /// * `tool`
        /// * `analysis_key`
        /// * `environment`
        /// 
        /// If you attempt to delete an analysis that is not the most recent in a set,
        /// you'll get a 400 response with the message:
        /// 
        /// ```
        /// Analysis specified is not deletable.
        /// ```
        /// 
        /// The response from a successful `DELETE` operation provides you with
        /// two alternative URLs for deleting the next analysis in the set:
        /// `next_analysis_url` and `confirm_delete_url`.
        /// Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
        /// in a set. This is a useful option if you want to preserve at least one analysis
        /// for the specified tool in your repository.
        /// Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
        /// When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
        /// in the 200 response is `null`.
        /// 
        /// As an example of the deletion process,
        /// let's imagine that you added a workflow that configured a particular code scanning tool
        /// to analyze the code in a repository. This tool has added 15 analyses:
        /// 10 on the default branch, and another 5 on a topic branch.
        /// You therefore have two separate sets of analyses for this tool.
        /// You've now decided that you want to remove all of the analyses for the tool.
        /// To do this you must make 15 separate deletion requests.
        /// To start, you must find an analysis that's identified as deletable.
        /// Each set of analyses always has one that's identified as deletable.
        /// Having found the deletable analysis for one of the two sets,
        /// delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
        /// Then repeat the process for the second set.
        /// The procedure therefore consists of a nested loop:
        /// 
        /// **Outer loop**:
        /// * List the analyses for the repository, filtered by tool.
        /// * Parse this list to find a deletable analysis. If found:
        /// 
        ///   **Inner loop**:
        ///   * Delete the identified analysis.
        ///   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
        /// 
        /// The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository)
        public func delete() -> Request<CodeScanningAnalysisDeletion> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning {
    public var sarifs: Sarifs {
        Sarifs(path: path + "/sarifs")
    }

    public struct Sarifs {
        /// Path: `/repos/{owner}/{repo}/code-scanning/sarifs`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.CodeScanning.Sarifs {
    public func sarifID(_ sarifID: String) -> WithSarifID {
        WithSarifID(path: path + "/" + sarifID)
    }

    public struct WithSarifID {
        /// Path: `/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}`
        public let path: String

        /// Get information about a SARIF upload
        ///
        /// Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository)
        public func get() -> Request<CodeScanningSarifsStatus> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/codespaces`
        public let path: String

        /// List codespaces in a repository for the authenticated user
        ///
        /// Lists the codespaces associated to a specified repository and the authenticated user.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var codespaces: [OctoKit.Codespace]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.codespaces = try values.decode([OctoKit.Codespace].self, forKey: "codespaces")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Codespaces {
    public var machines: Machines {
        Machines(path: path + "/machines")
    }

    public struct Machines {
        /// Path: `/repos/{owner}/{repo}/codespaces/machines`
        public let path: String

        /// List available machine types for a repository
        ///
        /// List the machine types available for a given repository based on its configuration.
        /// 
        /// Location is required.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var machines: [OctoKit.CodespaceMachine]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.machines = try values.decode([OctoKit.CodespaceMachine].self, forKey: "machines")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var collaborators: Collaborators {
        Collaborators(path: path + "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/repos/{owner}/{repo}/collaborators`
        public let path: String

        /// List repository collaborators
        ///
        /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
        /// 
        /// Team members will include the members of child teams.
        /// 
        /// You must have push access to the repository in order to list collaborators.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-collaborators)
        public func get() -> Request<[OctoKit.Collaborator]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Collaborators {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/repos/{owner}/{repo}/collaborators/{username}`
        public let path: String

        /// Check if a user is a repository collaborator
        ///
        /// For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
        /// 
        /// Team members will include the members of child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#check-if-a-user-is-a-repository-collaborator)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Remove a repository collaborator
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#remove-a-repository-collaborator)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Collaborators.WithUsername {
    public var permission: Permission {
        Permission(path: path + "/permission")
    }

    public struct Permission {
        /// Path: `/repos/{owner}/{repo}/collaborators/{username}/permission`
        public let path: String

        /// Get repository permissions for a user
        ///
        /// Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-permissions-for-a-user)
        public func get() -> Request<RepositoryCollaboratorPermission> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/comments`
        public let path: String

        /// List commit comments for a repository
        ///
        /// Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
        /// 
        /// Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository)
        public func get() -> Request<[OctoKit.CommitComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: path + "/" + commentID)
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}`
        public let path: String

        /// Get a commit comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-commit-comment)
        public func get() -> Request<CommitComment> {
            .get(path)
        }

        /// Delete a commit comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-commit-comment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for a commit comment
        ///
        /// List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete a commit comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/commits`
        public let path: String

        /// List commits
        ///
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commits)
        public func get() -> Request<[OctoKit.Commit]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits {
    public func commitSha(_ commitSha: String) -> WithCommitSha {
        WithCommitSha(path: path + "/" + commitSha)
    }

    public struct WithCommitSha {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var branchesWhereHead: BranchesWhereHead {
        BranchesWhereHead(path: path + "/branches-where-head")
    }

    public struct BranchesWhereHead {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`
        public let path: String

        /// List branches for HEAD commit
        ///
        /// Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-branches-for-head-commit)
        public func get() -> Request<[OctoKit.BranchShort]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/comments`
        public let path: String

        /// List commit comments
        ///
        /// Use the `:commit_sha` to specify the commit that will have its comments listed.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-comments)
        public func get() -> Request<[OctoKit.CommitComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithCommitSha {
    public var pulls: Pulls {
        Pulls(path: path + "/pulls")
    }

    public struct Pulls {
        /// Path: `/repos/{owner}/{repo}/commits/{commit_sha}/pulls`
        public let path: String

        /// List pull requests associated with a commit
        ///
        /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit)
        public func get() -> Request<[OctoKit.PullRequestSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}`
        public let path: String

        /// Get a commit
        ///
        /// Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
        /// 
        /// **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
        /// 
        /// You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
        /// 
        /// To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-commit)
        public func get() -> Request<Commit> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var checkRuns: CheckRuns {
        CheckRuns(path: path + "/check-runs")
    }

    public struct CheckRuns {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/check-runs`
        public let path: String

        /// List check runs for a Git reference
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
        /// 
        /// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var checkRuns: [OctoKit.CheckRun]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.checkRuns = try values.decode([OctoKit.CheckRun].self, forKey: "check_runs")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var checkSuites: CheckSuites {
        CheckSuites(path: path + "/check-suites")
    }

    public struct CheckSuites {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/check-suites`
        public let path: String

        /// List check suites for a Git reference
        ///
        /// **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
        /// 
        /// Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var checkSuites: [OctoKit.CheckSuite]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.checkSuites = try values.decode([OctoKit.CheckSuite].self, forKey: "check_suites")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/status`
        public let path: String

        /// Get the combined status for a specific reference
        ///
        /// Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
        /// 
        /// 
        /// Additionally, a combined `state` is returned. The `state` is one of:
        /// 
        /// *   **failure** if any of the contexts report as `error` or `failure`
        /// *   **pending** if there are no statuses or a context is `pending`
        /// *   **success** if the latest status for all contexts is `success`
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-combined-status-for-a-specific-reference)
        public func get() -> Request<CombinedCommitStatus> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Commits.WithRef {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/commits/{ref}/statuses`
        public let path: String

        /// List commit statuses for a reference
        ///
        /// Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
        /// 
        /// This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference)
        public func get() -> Request<[OctoKit.Status]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var community: Community {
        Community(path: path + "/community")
    }

    public struct Community {
        /// Path: `/repos/{owner}/{repo}/community`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Community {
    public var profile: Profile {
        Profile(path: path + "/profile")
    }

    public struct Profile {
        /// Path: `/repos/{owner}/{repo}/community/profile`
        public let path: String

        /// Get community profile metrics
        ///
        /// This endpoint will return all community profile metrics, including an
        /// overall health score, repository description, the presence of documentation, detected
        /// code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
        /// README, and CONTRIBUTING files.
        /// 
        /// The `health_percentage` score is defined as a percentage of how many of
        /// these four documents are present: README, CONTRIBUTING, LICENSE, and
        /// CODE_OF_CONDUCT. For example, if all four documents are present, then
        /// the `health_percentage` is `100`. If only one is present, then the
        /// `health_percentage` is `25`.
        /// 
        /// `content_reports_enabled` is only returned for organization-owned repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-community-profile-metrics)
        public func get() -> Request<CommunityProfile> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var compare: Compare {
        Compare(path: path + "/compare")
    }

    public struct Compare {
        /// Path: `/repos/{owner}/{repo}/compare`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Compare {
    public func basehead(_ basehead: String) -> WithBasehead {
        WithBasehead(path: path + "/" + basehead)
    }

    public struct WithBasehead {
        /// Path: `/repos/{owner}/{repo}/compare/{basehead}`
        public let path: String

        /// Compare two commits
        ///
        /// The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
        /// 
        /// The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
        /// 
        /// The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
        /// 
        /// **Working with large comparisons**
        /// 
        /// To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
        /// 
        /// When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#compare-two-commits)
        public func get() -> Request<CommitComparison> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var contentReferences: ContentReferences {
        ContentReferences(path: path + "/content_references")
    }

    public struct ContentReferences {
        /// Path: `/repos/{owner}/{repo}/content_references`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.ContentReferences {
    public func contentReferenceID(_ contentReferenceID: String) -> WithContentReferenceID {
        WithContentReferenceID(path: path + "/" + contentReferenceID)
    }

    public struct WithContentReferenceID {
        /// Path: `/repos/{owner}/{repo}/content_references/{content_reference_id}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.ContentReferences.WithContentReferenceID {
    public var attachments: Attachments {
        Attachments(path: path + "/attachments")
    }

    public struct Attachments {
        /// Path: `/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/repos/{owner}/{repo}/contents`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Contents {
    public func path(_ path: String) -> WithPath {
        WithPath(path: path + "/" + path)
    }

    public struct WithPath {
        /// Path: `/repos/{owner}/{repo}/contents/{path}`
        public let path: String

        /// Get repository content
        ///
        /// Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
        /// `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. 
        /// 
        /// Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
        /// retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
        /// type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
        /// object format.
        /// 
        /// **Note**:
        /// *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
        /// *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
        /// API](https://docs.github.com/rest/reference/git#get-a-tree).
        /// *   This API supports files up to 1 megabyte in size.
        /// 
        /// #### If the content is a directory
        /// The response will be an array of objects, one object for each item in the directory.
        /// When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
        /// _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
        /// In the next major version of the API, the type will be returned as "submodule".
        /// 
        /// #### If the content is a symlink 
        /// If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
        /// API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object 
        /// describing the symlink itself.
        /// 
        /// #### If the content is a submodule
        /// The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
        /// commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
        /// the submodule at that specific commit.
        /// 
        /// If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
        /// github.com URLs (`html_url` and `_links["html"]`) will have null values.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-content)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetResponse: Codable {
            case contentDirectory(ContentDirectory)
            case contentFile(ContentFile)
            case contentSymlink(ContentSymlink)
            case contentSubmodule(ContentSubmodule)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(ContentDirectory.self) {
                    self = .contentDirectory(value)
                } else if let value = try? container.decode(ContentFile.self) {
                    self = .contentFile(value)
                } else if let value = try? container.decode(ContentSymlink.self) {
                    self = .contentSymlink(value)
                } else if let value = try? container.decode(ContentSubmodule.self) {
                    self = .contentSubmodule(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }

        /// Delete a file
        ///
        /// Deletes a file in a repository.
        /// 
        /// You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
        /// 
        /// The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
        /// 
        /// You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-file)
        public func delete() -> Request<FileCommit> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var contributors: Contributors {
        Contributors(path: path + "/contributors")
    }

    public struct Contributors {
        /// Path: `/repos/{owner}/{repo}/contributors`
        public let path: String

        /// List repository contributors
        ///
        /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
        /// 
        /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-contributors)
        public func get() -> Request<[OctoKit.Contributor]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var deployments: Deployments {
        Deployments(path: path + "/deployments")
    }

    public struct Deployments {
        /// Path: `/repos/{owner}/{repo}/deployments`
        public let path: String

        /// List deployments
        ///
        /// Simple filtering of deployments is available via query parameters:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deployments)
        public func get() -> Request<[OctoKit.Deployment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments {
    public func deploymentID(_ deploymentID: String) -> WithDeploymentID {
        WithDeploymentID(path: path + "/" + deploymentID)
    }

    public struct WithDeploymentID {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}`
        public let path: String

        /// Get a deployment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deployment)
        public func get() -> Request<Deployment> {
            .get(path)
        }

        /// Delete a deployment
        ///
        /// To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
        /// 
        /// To set a deployment as inactive, you must:
        /// 
        /// *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
        /// *   Mark the active deployment as inactive by adding any non-successful deployment status.
        /// 
        /// For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-deployment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments.WithDeploymentID {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}/statuses`
        public let path: String

        /// List deployment statuses
        ///
        /// Users with pull access can view deployment statuses for a deployment:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deployment-statuses)
        public func get() -> Request<[OctoKit.DeploymentStatus]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Deployments.WithDeploymentID.Statuses {
    public func statusID(_ statusID: String) -> WithStatusID {
        WithStatusID(path: path + "/" + statusID)
    }

    public struct WithStatusID {
        /// Path: `/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`
        public let path: String

        /// Get a deployment status
        ///
        /// Users with pull access can view a deployment status for a deployment:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deployment-status)
        public func get() -> Request<DeploymentStatus> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var dispatches: Dispatches {
        Dispatches(path: path + "/dispatches")
    }

    public struct Dispatches {
        /// Path: `/repos/{owner}/{repo}/dispatches`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/repos/{owner}/{repo}/environments`
        public let path: String

        /// Get all environments
        ///
        /// Get all environments for a repository.
        /// 
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-environments)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var environments: [OctoKit.Environment]?
            /// The number of environments in this repository
            public var totalCount: Int?

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.environments = try values.decodeIfPresent([OctoKit.Environment].self, forKey: "environments")
                self.totalCount = try values.decodeIfPresent(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Environments {
    public func environmentName(_ environmentName: String) -> WithEnvironmentName {
        WithEnvironmentName(path: path + "/" + environmentName)
    }

    public struct WithEnvironmentName {
        /// Path: `/repos/{owner}/{repo}/environments/{environment_name}`
        public let path: String

        /// Get an environment
        ///
        /// Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-an-environment)
        public func get() -> Request<Environment> {
            .get(path)
        }

        /// Delete an environment
        ///
        /// You must authenticate using an access token with the repo scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-an-environment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/events`
        public let path: String

        /// List repository events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repository-events)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var forks: Forks {
        Forks(path: path + "/forks")
    }

    public struct Forks {
        /// Path: `/repos/{owner}/{repo}/forks`
        public let path: String

        /// List forks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-forks)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var git: Git {
        Git(path: path + "/git")
    }

    public struct Git {
        /// Path: `/repos/{owner}/{repo}/git`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var blobs: Blobs {
        Blobs(path: path + "/blobs")
    }

    public struct Blobs {
        /// Path: `/repos/{owner}/{repo}/git/blobs`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Blobs {
    public func fileSha(_ fileSha: String) -> WithFileSha {
        WithFileSha(path: path + "/" + fileSha)
    }

    public struct WithFileSha {
        /// Path: `/repos/{owner}/{repo}/git/blobs/{file_sha}`
        public let path: String

        /// Get a blob
        ///
        /// The `content` in the response will always be Base64 encoded.
        /// 
        /// _Note_: This API supports blobs up to 100 megabytes in size.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-blob)
        public func get() -> Request<Blob> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/git/commits`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Commits {
    public func commitSha(_ commitSha: String) -> WithCommitSha {
        WithCommitSha(path: path + "/" + commitSha)
    }

    public struct WithCommitSha {
        /// Path: `/repos/{owner}/{repo}/git/commits/{commit_sha}`
        public let path: String

        /// Get a commit
        ///
        /// Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
        /// 
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-commit)
        public func get() -> Request<GitCommit> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var matchingRefs: MatchingRefs {
        MatchingRefs(path: path + "/matching-refs")
    }

    public struct MatchingRefs {
        /// Path: `/repos/{owner}/{repo}/git/matching-refs`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.MatchingRefs {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/matching-refs/{ref}`
        public let path: String

        /// List matching references
        ///
        /// Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
        /// 
        /// When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
        /// 
        /// **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        /// 
        /// If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#list-matching-references)
        public func get() -> Request<[OctoKit.GitRef]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var ref: Ref {
        Ref(path: path + "/ref")
    }

    public struct Ref {
        /// Path: `/repos/{owner}/{repo}/git/ref`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Ref {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/ref/{ref}`
        public let path: String

        /// Get a reference
        ///
        /// Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
        /// 
        /// **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-reference)
        public func get() -> Request<GitRef> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var refs: Refs {
        Refs(path: path + "/refs")
    }

    public struct Refs {
        /// Path: `/repos/{owner}/{repo}/git/refs`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Refs {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/git/refs/{ref}`
        public let path: String

        /// Delete a reference
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#delete-a-reference)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/git/tags`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Tags {
    public func tagSha(_ tagSha: String) -> WithTagSha {
        WithTagSha(path: path + "/" + tagSha)
    }

    public struct WithTagSha {
        /// Path: `/repos/{owner}/{repo}/git/tags/{tag_sha}`
        public let path: String

        /// Get a tag
        ///
        /// **Signature verification object**
        /// 
        /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
        /// 
        /// | Name | Type | Description |
        /// | ---- | ---- | ----------- |
        /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
        /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
        /// | `signature` | `string` | The signature that was extracted from the commit. |
        /// | `payload` | `string` | The value that was signed. |
        /// 
        /// These are the possible values for `reason` in the `verification` object:
        /// 
        /// | Value | Description |
        /// | ----- | ----------- |
        /// | `expired_key` | The key that made the signature is expired. |
        /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
        /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
        /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
        /// | `unsigned` | The object does not include a signature. |
        /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
        /// | `no_user` | No user was associated with the `committer` email address in the commit. |
        /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
        /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
        /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
        /// | `malformed_signature` | There was an error parsing the signature. |
        /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
        /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-tag)
        public func get() -> Request<GitTag> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Git {
    public var trees: Trees {
        Trees(path: path + "/trees")
    }

    public struct Trees {
        /// Path: `/repos/{owner}/{repo}/git/trees`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Git.Trees {
    public func treeSha(_ treeSha: String) -> WithTreeSha {
        WithTreeSha(path: path + "/" + treeSha)
    }

    public struct WithTreeSha {
        /// Path: `/repos/{owner}/{repo}/git/trees/{tree_sha}`
        public let path: String

        /// Get a tree
        ///
        /// Returns a single tree using the SHA1 value for that tree.
        /// 
        /// If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/git#get-a-tree)
        public func get() -> Request<GitTree> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var hooks: Hooks {
        Hooks(path: path + "/hooks")
    }

    public struct Hooks {
        /// Path: `/repos/{owner}/{repo}/hooks`
        public let path: String

        /// List repository webhooks
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-webhooks)
        public func get() -> Request<[OctoKit.Hook]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks {
    public func hookID(_ hookID: String) -> WithHookID {
        WithHookID(path: path + "/" + hookID)
    }

    public struct WithHookID {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}`
        public let path: String

        /// Get a repository webhook
        ///
        /// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-webhook)
        public func get() -> Request<Hook> {
            .get(path)
        }

        /// Delete a repository webhook
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository-webhook)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var config: Config {
        Config(path: path + "/config")
    }

    public struct Config {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/config`
        public let path: String

        /// Get a webhook configuration for a repository
        ///
        /// Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
        /// 
        /// Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-webhook-configuration-for-a-repository)
        public func get() -> Request<WebhookConfig> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var deliveries: Deliveries {
        Deliveries(path: path + "/deliveries")
    }

    public struct Deliveries {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries`
        public let path: String

        /// List deliveries for a repository webhook
        ///
        /// Returns a list of webhook deliveries for a webhook configured in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deliveries-for-a-repository-webhook)
        public func get() -> Request<[OctoKit.HookDeliveryItem]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID.Deliveries {
    public func deliveryID(_ deliveryID: String) -> WithDeliveryID {
        WithDeliveryID(path: path + "/" + deliveryID)
    }

    public struct WithDeliveryID {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}`
        public let path: String

        /// Get a delivery for a repository webhook
        ///
        /// Returns a delivery for a webhook configured in a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-delivery-for-a-repository-webhook)
        public func get() -> Request<HookDelivery> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID.Deliveries.WithDeliveryID {
    public var attempts: Attempts {
        Attempts(path: path + "/attempts")
    }

    public struct Attempts {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var pings: Pings {
        Pings(path: path + "/pings")
    }

    public struct Pings {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/pings`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Hooks.WithHookID {
    public var tests: Tests {
        Tests(path: path + "/tests")
    }

    public struct Tests {
        /// Path: `/repos/{owner}/{repo}/hooks/{hook_id}/tests`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var `import`: Import {
        Import(path: path + "/import")
    }

    public struct Import {
        /// Path: `/repos/{owner}/{repo}/import`
        public let path: String

        /// Get an import status
        ///
        /// View the progress of an import.
        /// 
        /// **Import status**
        /// 
        /// This section includes details about the possible values of the `status` field of the Import Progress response.
        /// 
        /// An import that does not have errors will progress through these steps:
        /// 
        /// *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
        /// *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
        /// *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
        /// *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
        /// *   `complete` - the import is complete, and the repository is ready on GitHub.
        /// 
        /// If there are problems, you will see one of these in the `status` field:
        /// 
        /// *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
        /// *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
        /// *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
        /// 
        /// **The project_choices field**
        /// 
        /// When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
        /// 
        /// **Git LFS related fields**
        /// 
        /// This section includes details about Git LFS related fields that may be present in the Import Progress response.
        /// 
        /// *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
        /// *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
        /// *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
        /// *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-an-import-status)
        public func get() -> Request<OctoKit.Import> {
            .get(path)
        }

        /// Cancel an import
        ///
        /// Stop an import for a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#cancel-an-import)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var authors: Authors {
        Authors(path: path + "/authors")
    }

    public struct Authors {
        /// Path: `/repos/{owner}/{repo}/import/authors`
        public let path: String

        /// Get commit authors
        ///
        /// Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
        /// 
        /// This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-commit-authors)
        public func get() -> Request<[OctoKit.PorterAuthor]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import.Authors {
    public func authorID(_ authorID: String) -> WithAuthorID {
        WithAuthorID(path: path + "/" + authorID)
    }

    public struct WithAuthorID {
        /// Path: `/repos/{owner}/{repo}/import/authors/{author_id}`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var largeFiles: LargeFiles {
        LargeFiles(path: path + "/large_files")
    }

    public struct LargeFiles {
        /// Path: `/repos/{owner}/{repo}/import/large_files`
        public let path: String

        /// Get large files
        ///
        /// List files larger than 100MB found during the import
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-large-files)
        public func get() -> Request<[OctoKit.PorterLargeFile]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Import {
    public var lfs: Lfs {
        Lfs(path: path + "/lfs")
    }

    public struct Lfs {
        /// Path: `/repos/{owner}/{repo}/import/lfs`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/repos/{owner}/{repo}/installation`
        public let path: String

        /// Get a repository installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app)
        public func get() -> Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/repos/{owner}/{repo}/interaction-limits`
        public let path: String

        /// Get interaction restrictions for a repository
        ///
        /// Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: InteractionLimitResponse?
            public var object: [String: AnyJSON]?

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(InteractionLimitResponse.self)
                self.object = try? container.decode([String: AnyJSON].self)
            }
        }

        /// Set interaction restrictions for a repository
        ///
        /// Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository)
        public func put(_ body: InteractionLimit) -> Request<InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions for a repository
        ///
        /// Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/repos/{owner}/{repo}/invitations`
        public let path: String

        /// List repository invitations
        ///
        /// When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-invitations)
        public func get() -> Request<[OctoKit.RepositoryInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Invitations {
    public func invitationID(_ invitationID: String) -> WithInvitationID {
        WithInvitationID(path: path + "/" + invitationID)
    }

    public struct WithInvitationID {
        /// Path: `/repos/{owner}/{repo}/invitations/{invitation_id}`
        public let path: String

        /// Delete a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-repository-invitation)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/repos/{owner}/{repo}/issues`
        public let path: String

        /// List repository issues
        ///
        /// List issues in a repository.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-repository-issues)
        public func get() -> Request<[OctoKit.Issue]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/issues/comments`
        public let path: String

        /// List issue comments for a repository
        ///
        /// By default, Issue Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository)
        public func get() -> Request<[OctoKit.IssueComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: path + "/" + commentID)
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}`
        public let path: String

        /// Get an issue comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue-comment)
        public func get() -> Request<IssueComment> {
            .get(path)
        }

        /// Delete an issue comment
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-an-issue-comment)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for an issue comment
        ///
        /// List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete an issue comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/issues/events`
        public let path: String

        /// List issue events for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository)
        public func get() -> Request<[OctoKit.IssueEvent]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.Events {
    public func eventID(_ eventID: String) -> WithEventID {
        WithEventID(path: path + "/" + eventID)
    }

    public struct WithEventID {
        /// Path: `/repos/{owner}/{repo}/issues/events/{event_id}`
        public let path: String

        /// Get an issue event
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue-event)
        public func get() -> Request<IssueEvent> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues {
    public func issueNumber(_ issueNumber: String) -> WithIssueNumber {
        WithIssueNumber(path: path + "/" + issueNumber)
    }

    public struct WithIssueNumber {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}`
        public let path: String

        /// Get an issue
        ///
        /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
        /// [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
        /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
        /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
        /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
        /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-an-issue)
        public func get() -> Request<Issue> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var assignees: Assignees {
        Assignees(path: path + "/assignees")
    }

    public struct Assignees {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/assignees`
        public let path: String

        /// Remove assignees from an issue
        ///
        /// Removes one or more assignees from an issue.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue)
        public func delete() -> Request<Issue> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/comments`
        public let path: String

        /// List issue comments
        ///
        /// Issue Comments are ordered by ascending ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-comments)
        public func get() -> Request<[OctoKit.IssueComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/events`
        public let path: String

        /// List issue events
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-issue-events)
        public func get() -> Request<[OctoKit.IssueEventForIssue]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/labels`
        public let path: String

        /// List labels for an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-an-issue)
        public func get() -> Request<[OctoKit.Label]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        /// Remove all labels from an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: path + "/" + name)
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`
        public let path: String

        /// Remove a label from an issue
        ///
        /// Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue)
        public func delete() -> Request<[OctoKit.Label]> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/lock`
        public let path: String

        /// Unlock an issue
        ///
        /// Users with push access can unlock an issue's conversation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#unlock-an-issue)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/reactions`
        public let path: String

        /// List reactions for an issue
        ///
        /// List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}`
        public let path: String

        /// Delete an issue reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
        /// 
        /// Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Issues.WithIssueNumber {
    public var timeline: Timeline {
        Timeline(path: path + "/timeline")
    }

    public struct Timeline {
        /// Path: `/repos/{owner}/{repo}/issues/{issue_number}/timeline`
        public let path: String

        /// List timeline events for an issue
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue)
        public func get() -> Request<[OctoKit.TimelineIssueEvents]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/repos/{owner}/{repo}/keys`
        public let path: String

        /// List deploy keys
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-deploy-keys)
        public func get() -> Request<[OctoKit.DeployKey]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Keys {
    public func keyID(_ keyID: String) -> WithKeyID {
        WithKeyID(path: path + "/" + keyID)
    }

    public struct WithKeyID {
        /// Path: `/repos/{owner}/{repo}/keys/{key_id}`
        public let path: String

        /// Get a deploy key
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-deploy-key)
        public func get() -> Request<DeployKey> {
            .get(path)
        }

        /// Delete a deploy key
        ///
        /// Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-deploy-key)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/labels`
        public let path: String

        /// List labels for a repository
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-a-repository)
        public func get() -> Request<[OctoKit.Label]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Labels {
    public func name(_ name: String) -> WithName {
        WithName(path: path + "/" + name)
    }

    public struct WithName {
        /// Path: `/repos/{owner}/{repo}/labels/{name}`
        public let path: String

        /// Get a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-a-label)
        public func get() -> Request<Label> {
            .get(path)
        }

        /// Delete a label
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-a-label)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var languages: Languages {
        Languages(path: path + "/languages")
    }

    public struct Languages {
        /// Path: `/repos/{owner}/{repo}/languages`
        public let path: String

        /// List repository languages
        ///
        /// Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-languages)
        public func get() -> Request<Language> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var lfs: Lfs {
        Lfs(path: path + "/lfs")
    }

    public struct Lfs {
        /// Path: `/repos/{owner}/{repo}/lfs`
        public let path: String

        /// Disable Git LFS for a repository
        ///
        /// **Note:** The Git LFS API endpoints are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-git-lfs-for-a-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var license: License {
        License(path: path + "/license")
    }

    public struct License {
        /// Path: `/repos/{owner}/{repo}/license`
        public let path: String

        /// Get the license for a repository
        ///
        /// This method returns the contents of the repository's license file, if one is detected.
        /// 
        /// Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository)
        public func get() -> Request<LicenseContent> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var mergeUpstream: MergeUpstream {
        MergeUpstream(path: path + "/merge-upstream")
    }

    public struct MergeUpstream {
        /// Path: `/repos/{owner}/{repo}/merge-upstream`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var merges: Merges {
        Merges(path: path + "/merges")
    }

    public struct Merges {
        /// Path: `/repos/{owner}/{repo}/merges`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var milestones: Milestones {
        Milestones(path: path + "/milestones")
    }

    public struct Milestones {
        /// Path: `/repos/{owner}/{repo}/milestones`
        public let path: String

        /// List milestones
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-milestones)
        public func get() -> Request<[OctoKit.Milestone]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Milestones {
    public func milestoneNumber(_ milestoneNumber: String) -> WithMilestoneNumber {
        WithMilestoneNumber(path: path + "/" + milestoneNumber)
    }

    public struct WithMilestoneNumber {
        /// Path: `/repos/{owner}/{repo}/milestones/{milestone_number}`
        public let path: String

        /// Get a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#get-a-milestone)
        public func get() -> Request<Milestone> {
            .get(path)
        }

        /// Delete a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#delete-a-milestone)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Milestones.WithMilestoneNumber {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/repos/{owner}/{repo}/milestones/{milestone_number}/labels`
        public let path: String

        /// List labels for issues in a milestone
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone)
        public func get() -> Request<[OctoKit.Label]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var notifications: Notifications {
        Notifications(path: path + "/notifications")
    }

    public struct Notifications {
        /// Path: `/repos/{owner}/{repo}/notifications`
        public let path: String

        /// List repository notifications for the authenticated user
        ///
        /// List all notifications for the current user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Thread]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var pages: Pages {
        Pages(path: path + "/pages")
    }

    public struct Pages {
        /// Path: `/repos/{owner}/{repo}/pages`
        public let path: String

        /// Get a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-github-pages-site)
        public func get() -> Request<Page> {
            .get(path)
        }

        /// Delete a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-github-pages-site)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages {
    public var builds: Builds {
        Builds(path: path + "/builds")
    }

    public struct Builds {
        /// Path: `/repos/{owner}/{repo}/pages/builds`
        public let path: String

        /// List GitHub Pages builds
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-github-pages-builds)
        public func get() -> Request<[OctoKit.PageBuild]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages.Builds {
    public var latest: Latest {
        Latest(path: path + "/latest")
    }

    public struct Latest {
        /// Path: `/repos/{owner}/{repo}/pages/builds/latest`
        public let path: String

        /// Get latest Pages build
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-latest-pages-build)
        public func get() -> Request<PageBuild> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages.Builds {
    public func buildID(_ buildID: String) -> WithBuildID {
        WithBuildID(path: path + "/" + buildID)
    }

    public struct WithBuildID {
        /// Path: `/repos/{owner}/{repo}/pages/builds/{build_id}`
        public let path: String

        /// Get GitHub Pages build
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-github-pages-build)
        public func get() -> Request<PageBuild> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pages {
    public var health: Health {
        Health(path: path + "/health")
    }

    public struct Health {
        /// Path: `/repos/{owner}/{repo}/pages/health`
        public let path: String

        /// Get a DNS health check for GitHub Pages
        ///
        /// Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
        /// 
        /// The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
        /// 
        /// Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-dns-health-check-for-github-pages)
        public func get() -> Request<PagesHealthCheck> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/repos/{owner}/{repo}/projects`
        public let path: String

        /// List repository projects
        ///
        /// Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-repository-projects)
        public func get() -> Request<[OctoKit.Project]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var pulls: Pulls {
        Pulls(path: path + "/pulls")
    }

    public struct Pulls {
        /// Path: `/repos/{owner}/{repo}/pulls`
        public let path: String

        /// List pull requests
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-pull-requests)
        public func get() -> Request<[OctoKit.PullRequestSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/comments`
        public let path: String

        /// List review comments in a repository
        ///
        /// Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository)
        public func get() -> Request<[OctoKit.PullRequestReviewComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: path + "/" + commentID)
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}`
        public let path: String

        /// Get a review comment for a pull request
        ///
        /// Provides details for a review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request)
        public func get() -> Request<PullRequestReviewComment> {
            .get(path)
        }

        /// Delete a review comment for a pull request
        ///
        /// Deletes a review comment.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments.WithCommentID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions`
        public let path: String

        /// List reactions for a pull request review comment
        ///
        /// List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment)
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.Comments.WithCommentID.Reactions {
    public func reactionID(_ reactionID: String) -> WithReactionID {
        WithReactionID(path: path + "/" + reactionID)
    }

    public struct WithReactionID {
        /// Path: `/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}`
        public let path: String

        /// Delete a pull request comment reaction
        ///
        /// **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
        /// 
        /// Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls {
    public func pullNumber(_ pullNumber: String) -> WithPullNumber {
        WithPullNumber(path: path + "/" + pullNumber)
    }

    public struct WithPullNumber {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}`
        public let path: String

        /// Get a pull request
        ///
        /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Lists details of a pull request by providing its number.
        /// 
        /// When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        /// 
        /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
        /// 
        /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
        /// 
        /// *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
        /// *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
        /// *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
        /// 
        /// Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-pull-request)
        public func get() -> Request<PullRequest> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/codespaces`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments`
        public let path: String

        /// List review comments on a pull request
        ///
        /// Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request)
        public func get() -> Request<[OctoKit.PullRequestReviewComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Comments {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: path + "/" + commentID)
    }

    public struct WithCommentID {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Comments.WithCommentID {
    public var replies: Replies {
        Replies(path: path + "/replies")
    }

    public struct Replies {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/commits`
        public let path: String

        /// List commits on a pull request
        ///
        /// Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request)
        public func get() -> Request<[OctoKit.Commit]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var files: Files {
        Files(path: path + "/files")
    }

    public struct Files {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/files`
        public let path: String

        /// List pull requests files
        ///
        /// **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-pull-requests-files)
        public func get() -> Request<[OctoKit.DiffEntry]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var merge: Merge {
        Merge(path: path + "/merge")
    }

    public struct Merge {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/merge`
        public let path: String

        /// Check if a pull request has been merged
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var requestedReviewers: RequestedReviewers {
        RequestedReviewers(path: path + "/requested_reviewers")
    }

    public struct RequestedReviewers {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`
        public let path: String

        /// List requested reviewers for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request)
        public func get() -> Request<PullRequestReviewRequest> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        /// Remove requested reviewers from a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request)
        public func delete() -> Request<PullRequestSimple> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var reviews: Reviews {
        Reviews(path: path + "/reviews")
    }

    public struct Reviews {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews`
        public let path: String

        /// List reviews for a pull request
        ///
        /// The list of reviews returns in chronological order.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request)
        public func get() -> Request<[OctoKit.PullRequestReview]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews {
    public func reviewID(_ reviewID: String) -> WithReviewID {
        WithReviewID(path: path + "/" + reviewID)
    }

    public struct WithReviewID {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`
        public let path: String

        /// Get a review for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request)
        public func get() -> Request<PullRequestReview> {
            .get(path)
        }

        /// Delete a pending review for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request)
        public func delete() -> Request<PullRequestReview> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`
        public let path: String

        /// List comments for a pull request review
        ///
        /// List comments for a specific pull request review.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review)
        public func get() -> Request<[OctoKit.ReviewComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var dismissals: Dismissals {
        Dismissals(path: path + "/dismissals")
    }

    public struct Dismissals {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber.Reviews.WithReviewID {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var updateBranch: UpdateBranch {
        UpdateBranch(path: path + "/update-branch")
    }

    public struct UpdateBranch {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/update-branch`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var readme: Readme {
        Readme(path: path + "/readme")
    }

    public struct Readme {
        /// Path: `/repos/{owner}/{repo}/readme`
        public let path: String

        /// Get a repository README
        ///
        /// Gets the preferred README for a repository.
        /// 
        /// READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-readme)
        public func get() -> Request<ContentFile> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Readme {
    public func dir(_ dir: String) -> WithDir {
        WithDir(path: path + "/" + dir)
    }

    public struct WithDir {
        /// Path: `/repos/{owner}/{repo}/readme/{dir}`
        public let path: String

        /// Get a repository README for a directory
        ///
        /// Gets the README from a repository directory.
        /// 
        /// READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme)
        public func get() -> Request<ContentFile> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var releases: Releases {
        Releases(path: path + "/releases")
    }

    public struct Releases {
        /// Path: `/repos/{owner}/{repo}/releases`
        public let path: String

        /// List releases
        ///
        /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
        /// 
        /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-releases)
        public func get() -> Request<[OctoKit.Release]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var assets: Assets {
        Assets(path: path + "/assets")
    }

    public struct Assets {
        /// Path: `/repos/{owner}/{repo}/releases/assets`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.Assets {
    public func assetID(_ assetID: String) -> WithAssetID {
        WithAssetID(path: path + "/" + assetID)
    }

    public struct WithAssetID {
        /// Path: `/repos/{owner}/{repo}/releases/assets/{asset_id}`
        public let path: String

        /// Get a release asset
        ///
        /// To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release-asset)
        public func get() -> Request<ReleaseAsset> {
            .get(path)
        }

        /// Delete a release asset
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-release-asset)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var generateNotes: GenerateNotes {
        GenerateNotes(path: path + "/generate-notes")
    }

    public struct GenerateNotes {
        /// Path: `/repos/{owner}/{repo}/releases/generate-notes`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var latest: Latest {
        Latest(path: path + "/latest")
    }

    public struct Latest {
        /// Path: `/repos/{owner}/{repo}/releases/latest`
        public let path: String

        /// Get the latest release
        ///
        /// View the latest published full release for the repository.
        /// 
        /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-latest-release)
        public func get() -> Request<Release> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/releases/tags`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.Tags {
    public func tag(_ tag: String) -> WithTag {
        WithTag(path: path + "/" + tag)
    }

    public struct WithTag {
        /// Path: `/repos/{owner}/{repo}/releases/tags/{tag}`
        public let path: String

        /// Get a release by tag name
        ///
        /// Get a published release with the specified tag.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name)
        public func get() -> Request<Release> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases {
    public func releaseID(_ releaseID: String) -> WithReleaseID {
        WithReleaseID(path: path + "/" + releaseID)
    }

    public struct WithReleaseID {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}`
        public let path: String

        /// Get a release
        ///
        /// **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-release)
        public func get() -> Request<Release> {
            .get(path)
        }

        /// Delete a release
        ///
        /// Users with push access to the repository can delete a release.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-release)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.WithReleaseID {
    public var assets: Assets {
        Assets(path: path + "/assets")
    }

    public struct Assets {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}/assets`
        public let path: String

        /// List release assets
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-release-assets)
        public func get() -> Request<[OctoKit.ReleaseAsset]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Releases.WithReleaseID {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/repos/{owner}/{repo}/releases/{release_id}/reactions`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var secretScanning: SecretScanning {
        SecretScanning(path: path + "/secret-scanning")
    }

    public struct SecretScanning {
        /// Path: `/repos/{owner}/{repo}/secret-scanning`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.SecretScanning {
    public var alerts: Alerts {
        Alerts(path: path + "/alerts")
    }

    public struct Alerts {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts`
        public let path: String

        /// List secret scanning alerts for a repository
        ///
        /// Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository)
        public func get() -> Request<[OctoKit.SecretScanningAlert]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.SecretScanning.Alerts {
    public func alertNumber(_ alertNumber: String) -> WithAlertNumber {
        WithAlertNumber(path: path + "/" + alertNumber)
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a secret scanning alert
        ///
        /// Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert)
        public func get() -> Request<SecretScanningAlert> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var stargazers: Stargazers {
        Stargazers(path: path + "/stargazers")
    }

    public struct Stargazers {
        /// Path: `/repos/{owner}/{repo}/stargazers`
        public let path: String

        /// List stargazers
        ///
        /// Lists the people that have starred the repository.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-stargazers)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var simpleUsers: [OctoKit.SimpleUser]?
            public var stargazers: [OctoKit.Stargazer]?

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.simpleUsers = try? container.decode([OctoKit.SimpleUser].self)
                self.stargazers = try? container.decode([OctoKit.Stargazer].self)
            }
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var stats: Stats {
        Stats(path: path + "/stats")
    }

    public struct Stats {
        /// Path: `/repos/{owner}/{repo}/stats`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var codeFrequency: CodeFrequency {
        CodeFrequency(path: path + "/code_frequency")
    }

    public struct CodeFrequency {
        /// Path: `/repos/{owner}/{repo}/stats/code_frequency`
        public let path: String

        /// Get the weekly commit activity
        ///
        /// Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-weekly-commit-activity)
        public func get() -> Request<[[Int]]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var commitActivity: CommitActivity {
        CommitActivity(path: path + "/commit_activity")
    }

    public struct CommitActivity {
        /// Path: `/repos/{owner}/{repo}/stats/commit_activity`
        public let path: String

        /// Get the last year of commit activity
        ///
        /// Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-last-year-of-commit-activity)
        public func get() -> Request<[OctoKit.CommitActivity]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var contributors: Contributors {
        Contributors(path: path + "/contributors")
    }

    public struct Contributors {
        /// Path: `/repos/{owner}/{repo}/stats/contributors`
        public let path: String

        /// Get all contributor commit activity
        ///
        /// 
        /// Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
        /// 
        /// *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
        /// *   `a` - Number of additions
        /// *   `d` - Number of deletions
        /// *   `c` - Number of commits
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-contributor-commit-activity)
        public func get() -> Request<[OctoKit.ContributorActivity]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var participation: Participation {
        Participation(path: path + "/participation")
    }

    public struct Participation {
        /// Path: `/repos/{owner}/{repo}/stats/participation`
        public let path: String

        /// Get the weekly commit count
        ///
        /// Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
        /// 
        /// The array order is oldest week (index 0) to most recent week.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-weekly-commit-count)
        public func get() -> Request<ParticipationStats> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Stats {
    public var punchCard: PunchCard {
        PunchCard(path: path + "/punch_card")
    }

    public struct PunchCard {
        /// Path: `/repos/{owner}/{repo}/stats/punch_card`
        public let path: String

        /// Get the hourly commit count for each day
        ///
        /// Each array contains the day number, hour number, and number of commits:
        /// 
        /// *   `0-6`: Sunday - Saturday
        /// *   `0-23`: Hour of day
        /// *   Number of commits
        /// 
        /// For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-the-hourly-commit-count-for-each-day)
        public func get() -> Request<[[Int]]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var statuses: Statuses {
        Statuses(path: path + "/statuses")
    }

    public struct Statuses {
        /// Path: `/repos/{owner}/{repo}/statuses`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Statuses {
    public func sha(_ sha: String) -> WithSha {
        WithSha(path: path + "/" + sha)
    }

    public struct WithSha {
        /// Path: `/repos/{owner}/{repo}/statuses/{sha}`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var subscribers: Subscribers {
        Subscribers(path: path + "/subscribers")
    }

    public struct Subscribers {
        /// Path: `/repos/{owner}/{repo}/subscribers`
        public let path: String

        /// List watchers
        ///
        /// Lists the people watching the specified repository.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-watchers)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var subscription: Subscription {
        Subscription(path: path + "/subscription")
    }

    public struct Subscription {
        /// Path: `/repos/{owner}/{repo}/subscription`
        public let path: String

        /// Get a repository subscription
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#get-a-repository-subscription)
        public func get() -> Request<RepositorySubscription> {
            .get(path)
        }

        /// Delete a repository subscription
        ///
        /// This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/repos/{owner}/{repo}/tags`
        public let path: String

        /// List repository tags
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-tags)
        public func get() -> Request<[OctoKit.Tag]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var tarball: Tarball {
        Tarball(path: path + "/tarball")
    }

    public struct Tarball {
        /// Path: `/repos/{owner}/{repo}/tarball`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Tarball {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/tarball/{ref}`
        public let path: String

        /// Download a repository archive (tar)
        ///
        /// Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
        /// `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
        /// the `Location` header to make a second `GET` request.
        /// **Note**: For private repositories, these links are temporary and expire after five minutes.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#download-a-repository-archive)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/repos/{owner}/{repo}/teams`
        public let path: String

        /// List repository teams
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-teams)
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var topics: Topics {
        Topics(path: path + "/topics")
    }

    public struct Topics {
        /// Path: `/repos/{owner}/{repo}/topics`
        public let path: String

        /// Get all repository topics
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-all-repository-topics)
        public func get() -> Request<Topic> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var traffic: Traffic {
        Traffic(path: path + "/traffic")
    }

    public struct Traffic {
        /// Path: `/repos/{owner}/{repo}/traffic`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var clones: Clones {
        Clones(path: path + "/clones")
    }

    public struct Clones {
        /// Path: `/repos/{owner}/{repo}/traffic/clones`
        public let path: String

        /// Get repository clones
        ///
        /// Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-repository-clones)
        public func get() -> Request<CloneTraffic> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var popular: Popular {
        Popular(path: path + "/popular")
    }

    public struct Popular {
        /// Path: `/repos/{owner}/{repo}/traffic/popular`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic.Popular {
    public var paths: Paths {
        Paths(path: path + "/paths")
    }

    public struct Paths {
        /// Path: `/repos/{owner}/{repo}/traffic/popular/paths`
        public let path: String

        /// Get top referral paths
        ///
        /// Get the top 10 popular contents over the last 14 days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-top-referral-paths)
        public func get() -> Request<[OctoKit.ContentTraffic]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic.Popular {
    public var referrers: Referrers {
        Referrers(path: path + "/referrers")
    }

    public struct Referrers {
        /// Path: `/repos/{owner}/{repo}/traffic/popular/referrers`
        public let path: String

        /// Get top referral sources
        ///
        /// Get the top 10 referrers over the last 14 days.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-top-referral-sources)
        public func get() -> Request<[OctoKit.ReferrerTraffic]> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo.Traffic {
    public var views: Views {
        Views(path: path + "/views")
    }

    public struct Views {
        /// Path: `/repos/{owner}/{repo}/traffic/views`
        public let path: String

        /// Get page views
        ///
        /// Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-page-views)
        public func get() -> Request<ViewTraffic> {
            .get(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var transfer: Transfer {
        Transfer(path: path + "/transfer")
    }

    public struct Transfer {
        /// Path: `/repos/{owner}/{repo}/transfer`
        public let path: String


    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var vulnerabilityAlerts: VulnerabilityAlerts {
        VulnerabilityAlerts(path: path + "/vulnerability-alerts")
    }

    public struct VulnerabilityAlerts {
        /// Path: `/repos/{owner}/{repo}/vulnerability-alerts`
        public let path: String

        /// Check if vulnerability alerts are enabled for a repository
        ///
        /// Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Disable vulnerability alerts
        ///
        /// Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Repos.WithOwner.WithRepo {
    public var zipball: Zipball {
        Zipball(path: path + "/zipball")
    }

    public struct Zipball {
        /// Path: `/repos/{owner}/{repo}/zipball`
        public let path: String
    }
}

extension Paths.Repos.WithOwner.WithRepo.Zipball {
    public func ref(_ ref: String) -> WithRef {
        WithRef(path: path + "/" + ref)
    }

    public struct WithRef {
        /// Path: `/repos/{owner}/{repo}/zipball/{ref}`
        public let path: String

        /// Download a repository archive (zip)
        ///
        /// Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
        /// `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
        /// the `Location` header to make a second `GET` request.
        /// **Note**: For private repositories, these links are temporary and expire after five minutes.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#download-a-repository-archive)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Repos {
    public func templateOwner(_ templateOwner: String) -> WithTemplateOwner {
        WithTemplateOwner(path: path + "/" + templateOwner)
    }

    public struct WithTemplateOwner {
        /// Path: `/repos/{template_owner}`
        public let path: String
    }
}

extension Paths.Repos.WithTemplateOwner {
    public func templateRepo(_ templateRepo: String) -> WithTemplateRepo {
        WithTemplateRepo(path: path + "/" + templateRepo)
    }

    public struct WithTemplateRepo {
        /// Path: `/repos/{template_owner}/{template_repo}`
        public let path: String
    }
}

extension Paths.Repos.WithTemplateOwner.WithTemplateRepo {
    public var generate: Generate {
        Generate(path: path + "/generate")
    }

    public struct Generate {
        /// Path: `/repos/{template_owner}/{template_repo}/generate`
        public let path: String


    }
}

extension Paths {
    public static var repositories: Repositories {
        Repositories(path: "/repositories")
    }

    public struct Repositories {
        /// Path: `/repositories`
        public let path: String

        /// List public repositories
        ///
        /// Lists all public repositories in the order that they were created.
        /// 
        /// Note:
        /// - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
        /// - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-public-repositories)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/repositories/{repository_id}`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/repositories/{repository_id}/environments`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID.Environments {
    public func environmentName(_ environmentName: String) -> WithEnvironmentName {
        WithEnvironmentName(path: path + "/" + environmentName)
    }

    public struct WithEnvironmentName {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}`
        public let path: String
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets`
        public let path: String

        /// List environment secrets
        ///
        /// Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-environment-secrets)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var secrets: [OctoKit.ActionsSecret]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.secrets = try values.decode([OctoKit.ActionsSecret].self, forKey: "secrets")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets/public-key`
        public let path: String

        /// Get an environment public key
        ///
        /// Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-environment-public-key)
        public func get() -> Request<ActionsPublicKey> {
            .get(path)
        }
    }
}

extension Paths.Repositories.WithRepositoryID.Environments.WithEnvironmentName.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: path + "/" + secretName)
    }

    public struct WithSecretName {
        /// Path: `/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}`
        public let path: String

        /// Get an environment secret
        ///
        /// Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#get-an-environment-secret)
        public func get() -> Request<ActionsSecret> {
            .get(path)
        }

        /// Delete an environment secret
        ///
        /// Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#delete-an-environment-secret)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var scim: Scim {
        Scim(path: "/scim")
    }

    public struct Scim {
        /// Path: `/scim`
        public let path: String
    }
}

extension Paths.Scim {
    public var v2: V2 {
        V2(path: path + "/v2")
    }

    public struct V2 {
        /// Path: `/scim/v2`
        public let path: String
    }
}

extension Paths.Scim.V2 {
    public var enterprises: Enterprises {
        Enterprises(path: path + "/enterprises")
    }

    public struct Enterprises {
        /// Path: `/scim/v2/enterprises`
        public let path: String
    }
}

extension Paths.Scim.V2.Enterprises {
    public func enterprise(_ enterprise: String) -> WithEnterprise {
        WithEnterprise(path: path + "/" + enterprise)
    }

    public struct WithEnterprise {
        /// Path: `/scim/v2/enterprises/{enterprise}`
        public let path: String
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise {
    public var groups: Groups {
        Groups(path: path + "/Groups")
    }

    public struct Groups {
        /// Path: `/scim/v2/enterprises/{enterprise}/Groups`
        public let path: String

        /// List provisioned SCIM groups for an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise)
        public func get() -> Request<ScimGroupListEnterprise> {
            .get(path)
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise.Groups {
    public func scimGroupID(_ scimGroupID: String) -> WithScimGroupID {
        WithScimGroupID(path: path + "/" + scimGroupID)
    }

    public struct WithScimGroupID {
        /// Path: `/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}`
        public let path: String

        /// Get SCIM provisioning information for an enterprise group
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group)
        public func get() -> Request<ScimEnterpriseGroup> {
            .get(path)
        }

        /// Delete a SCIM group from an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise {
    public var users: Users {
        Users(path: path + "/Users")
    }

    public struct Users {
        /// Path: `/scim/v2/enterprises/{enterprise}/Users`
        public let path: String

        /// List SCIM provisioned identities for an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
        /// 
        /// When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
        ///   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
        ///   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
        ///   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
        /// 
        /// The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
        /// 
        /// 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
        /// 
        /// 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
        /// 
        /// 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
        ///    - If the user signs in, their GitHub account is linked to this entry.
        ///    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise)
        public func get() -> Request<ScimUserListEnterprise> {
            .get(path)
        }
    }
}

extension Paths.Scim.V2.Enterprises.WithEnterprise.Users {
    public func scimUserID(_ scimUserID: String) -> WithScimUserID {
        WithScimUserID(path: path + "/" + scimUserID)
    }

    public struct WithScimUserID {
        /// Path: `/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}`
        public let path: String

        /// Get SCIM provisioning information for an enterprise user
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user)
        public func get() -> Request<ScimEnterpriseUser> {
            .get(path)
        }

        /// Delete a SCIM user from an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Scim.V2 {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/scim/v2/organizations`
        public let path: String
    }
}

extension Paths.Scim.V2.Organizations {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: path + "/" + org)
    }

    public struct WithOrg {
        /// Path: `/scim/v2/organizations/{org}`
        public let path: String
    }
}

extension Paths.Scim.V2.Organizations.WithOrg {
    public var users: Users {
        Users(path: path + "/Users")
    }

    public struct Users {
        /// Path: `/scim/v2/organizations/{org}/Users`
        public let path: String


    }
}

extension Paths.Scim.V2.Organizations.WithOrg.Users {
    public func scimUserID(_ scimUserID: String) -> WithScimUserID {
        WithScimUserID(path: path + "/" + scimUserID)
    }

    public struct WithScimUserID {
        /// Path: `/scim/v2/organizations/{org}/Users/{scim_user_id}`
        public let path: String

        /// Delete a SCIM user from an organization
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String
    }
}

extension Paths.Search {
    public var code: Code {
        Code(path: path + "/code")
    }

    public struct Code {
        /// Path: `/search/code`
        public let path: String

        /// Search code
        ///
        /// Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
        /// 
        /// `q=addClass+in:file+language:js+repo:jquery/jquery`
        /// 
        /// This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
        /// 
        /// #### Considerations for code search
        /// 
        /// Due to the complexity of searching code, there are a few restrictions on how searches are performed:
        /// 
        /// *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
        /// *   Only files smaller than 384 KB are searchable.
        /// *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
        /// language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-code)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.CodeSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.CodeSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var commits: Commits {
        Commits(path: path + "/commits")
    }

    public struct Commits {
        /// Path: `/search/commits`
        public let path: String

        /// Search commits
        ///
        /// Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
        /// metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
        /// 
        /// `q=repo:octocat/Spoon-Knife+css`
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-commits)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.CommitSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.CommitSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/search/issues`
        public let path: String

        /// Search issues and pull requests
        ///
        /// Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
        /// search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
        /// 
        /// `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
        /// 
        /// This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
        /// 
        /// **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-issues-and-pull-requests)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.IssueSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.IssueSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/search/labels`
        public let path: String

        /// Search labels
        ///
        /// Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
        /// 
        /// `q=bug+defect+enhancement&repository_id=64778136`
        /// 
        /// The labels that best match the query appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-labels)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.LabelSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.LabelSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/search/repositories`
        public let path: String

        /// Search repositories
        ///
        /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
        /// 
        /// `q=tetris+language:assembly&sort=stars&order=desc`
        /// 
        /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-repositories)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.RepoSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.RepoSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var topics: Topics {
        Topics(path: path + "/topics")
    }

    public struct Topics {
        /// Path: `/search/topics`
        public let path: String

        /// Search topics
        ///
        /// Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
        /// 
        /// When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
        /// 
        /// `q=ruby+is:featured`
        /// 
        /// This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-topics)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.TopicSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.TopicSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.Search {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/search/users`
        public let path: String

        /// Search users
        ///
        /// Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
        /// 
        /// When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
        /// 
        /// For example, if you're looking for a list of popular users, you might try this query:
        /// 
        /// `q=tom+repos:%3E42+followers:%3E1000`
        /// 
        /// This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/search#search-users)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var isIncompleteResults: Bool
            public var items: [OctoKit.UserSearchResultItem]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isIncompleteResults = try values.decode(Bool.self, forKey: "incomplete_results")
                self.items = try values.decode([OctoKit.UserSearchResultItem].self, forKey: "items")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths {
    public static var teams: Teams {
        Teams(path: "/teams")
    }

    public struct Teams {
        /// Path: `/teams`
        public let path: String
    }
}

extension Paths.Teams {
    public func teamID(_ teamID: String) -> WithTeamID {
        WithTeamID(path: path + "/" + teamID)
    }

    public struct WithTeamID {
        /// Path: `/teams/{team_id}`
        public let path: String

        /// Get a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#get-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamFull> {
            .get(path)
        }

        /// Delete a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
        /// 
        /// To delete a team, the authenticated user must be an organization owner or team maintainer.
        /// 
        /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#delete-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var discussions: Discussions {
        Discussions(path: path + "/discussions")
    }

    public struct Discussions {
        /// Path: `/teams/{team_id}/discussions`
        public let path: String

        /// List discussions (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
        /// 
        /// List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussions-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.TeamDiscussion]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions {
    public func discussionNumber(_ discussionNumber: String) -> WithDiscussionNumber {
        WithDiscussionNumber(path: path + "/" + discussionNumber)
    }

    public struct WithDiscussionNumber {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}`
        public let path: String

        /// Get a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
        /// 
        /// Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamDiscussion> {
            .get(path)
        }

        /// Delete a discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
        /// 
        /// Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments`
        public let path: String

        /// List discussion comments (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
        /// 
        /// List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.TeamDiscussionComment]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber.Comments {
    public func commentNumber(_ commentNumber: String) -> WithCommentNumber {
        WithCommentNumber(path: path + "/" + commentNumber)
    }

    public struct WithCommentNumber {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`
        public let path: String

        /// Get a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
        /// 
        /// Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamDiscussionComment> {
            .get(path)
        }

        /// Delete a discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
        /// 
        /// Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber.Comments.WithCommentNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions`
        public let path: String

        /// List reactions for a team discussion comment (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
        /// 
        /// List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Discussions.WithDiscussionNumber {
    public var reactions: Reactions {
        Reactions(path: path + "/reactions")
    }

    public struct Reactions {
        /// Path: `/teams/{team_id}/discussions/{discussion_number}/reactions`
        public let path: String

        /// List reactions for a team discussion (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
        /// 
        /// List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.Reaction]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/teams/{team_id}/invitations`
        public let path: String

        /// List pending team invitations (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
        /// 
        /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.OrganizationInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/teams/{team_id}/members`
        public let path: String

        /// List team members (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
        /// 
        /// Team members will include the members of child teams.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-team-members-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Members {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/teams/{team_id}/members/{username}`
        public let path: String

        /// Get team member (Legacy)
        ///
        /// The "Get team member" endpoint (described below) is deprecated.
        /// 
        /// We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
        /// 
        /// To list members in a team, the team must be visible to the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-member-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Remove team member (Legacy)
        ///
        /// The "Remove team member" endpoint (described below) is deprecated.
        /// 
        /// We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-member-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/teams/{team_id}/memberships`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.Memberships {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/teams/{team_id}/memberships/{username}`
        public let path: String

        /// Get team membership for a user (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
        /// 
        /// Team members will include the members of child teams.
        /// 
        /// To get a user's membership with a team, the team must be visible to the authenticated user.
        /// 
        /// **Note:**
        /// The response contains the `state` of the membership and the member's `role`.
        /// 
        /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamMembership> {
            .get(path)
        }

        /// Remove team membership for a user (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
        /// 
        /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/teams/{team_id}/projects`
        public let path: String

        /// List team projects (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
        /// 
        /// Lists the organization projects for a team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-team-projects-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.TeamProject]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Projects {
    public func projectID(_ projectID: String) -> WithProjectID {
        WithProjectID(path: path + "/" + projectID)
    }

    public struct WithProjectID {
        /// Path: `/teams/{team_id}/projects/{project_id}`
        public let path: String

        /// Check team permissions for a project (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
        /// 
        /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamProject> {
            .get(path)
        }

        /// Remove a project from a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
        /// 
        /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/teams/{team_id}/repos`
        public let path: String

        /// List team repositories (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Teams.WithTeamID.Repos {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: path + "/" + owner)
    }

    public struct WithOwner {
        /// Path: `/teams/{team_id}/repos/{owner}`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.Repos.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: path + "/" + repo)
    }

    public struct WithRepo {
        /// Path: `/teams/{team_id}/repos/{owner}/{repo}`
        public let path: String

        /// Check team permissions for a repository (Legacy)
        ///
        /// **Note**: Repositories inherited through a parent team will also be checked.
        /// 
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
        /// 
        /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<TeamRepository> {
            .get(path)
        }

        /// Remove a repository from a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
        /// 
        /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var teamSync: TeamSync {
        TeamSync(path: path + "/team-sync")
    }

    public struct TeamSync {
        /// Path: `/teams/{team_id}/team-sync`
        public let path: String
    }
}

extension Paths.Teams.WithTeamID.TeamSync {
    public var groupMappings: GroupMappings {
        GroupMappings(path: path + "/group-mappings")
    }

    public struct GroupMappings {
        /// Path: `/teams/{team_id}/team-sync/group-mappings`
        public let path: String

        /// List IdP groups for a team (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
        /// 
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups connected to a team on GitHub.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<GroupMapping> {
            .get(path)
        }
    }
}

extension Paths.Teams.WithTeamID {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/teams/{team_id}/teams`
        public let path: String

        /// List child teams (Legacy)
        ///
        /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams/#list-child-teams-legacy)
        @available(*, deprecated, message: "Deprecated")
        public func get() -> Request<[OctoKit.Team]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var user: User {
        User(path: "/user")
    }

    public struct User {
        /// Path: `/user`
        public let path: String

        /// Get the authenticated user
        ///
        /// If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
        /// 
        /// If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-the-authenticated-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetResponse: Codable {
            case privateUser(PrivateUser)
            case publicUser(PublicUser)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(PrivateUser.self) {
                    self = .privateUser(value)
                } else if let value = try? container.decode(PublicUser.self) {
                    self = .publicUser(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }
    }
}

extension Paths.User {
    public var blocks: Blocks {
        Blocks(path: path + "/blocks")
    }

    public struct Blocks {
        /// Path: `/user/blocks`
        public let path: String

        /// List users blocked by the authenticated user
        ///
        /// List the users you've blocked on your personal account.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }
    }
}

extension Paths.User.Blocks {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/user/blocks/{username}`
        public let path: String

        /// Check if a user is blocked by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Unblock a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#unblock-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/user/codespaces`
        public let path: String

        /// List codespaces for the authenticated user
        ///
        /// Lists the authenticated user's codespaces.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var codespaces: [OctoKit.Codespace]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.codespaces = try values.decode([OctoKit.Codespace].self, forKey: "codespaces")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Codespaces {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/user/codespaces/secrets`
        public let path: String

        /// List secrets for the authenticated user
        ///
        /// Lists all secrets available for a user's Codespaces without revealing their
        /// encrypted values.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var secrets: [OctoKit.CodespacesSecret]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.secrets = try values.decode([OctoKit.CodespacesSecret].self, forKey: "secrets")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Codespaces.Secrets {
    public var publicKey: PublicKey {
        PublicKey(path: path + "/public-key")
    }

    public struct PublicKey {
        /// Path: `/user/codespaces/secrets/public-key`
        public let path: String

        /// Get public key for the authenticated user
        ///
        /// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with one of the 'read:user' or 'user' scopes in their personal access token. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user)
        public func get() -> Request<CodespacesUserPublicKey> {
            .get(path)
        }
    }
}

extension Paths.User.Codespaces.Secrets {
    public func secretName(_ secretName: String) -> WithSecretName {
        WithSecretName(path: path + "/" + secretName)
    }

    public struct WithSecretName {
        /// Path: `/user/codespaces/secrets/{secret_name}`
        public let path: String

        /// Get a secret for the authenticated user
        ///
        /// Gets a secret available to a user's codespaces without revealing its encrypted value.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user)
        public func get() -> Request<CodespacesSecret> {
            .get(path)
        }

        /// Delete a secret for the authenticated user
        ///
        /// Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret. You must authenticate using an access token with the `user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Codespaces.Secrets.WithSecretName {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/codespaces/secrets/{secret_name}/repositories`
        public let path: String

        /// List selected repositories for a user secret
        ///
        /// List the repositories that have been granted the ability to use a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.MinimalRepository]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.MinimalRepository].self, forKey: "repositories")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Codespaces.Secrets.WithSecretName.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/user/codespaces/secrets/{secret_name}/repositories/{repository_id}`
        public let path: String

        /// Remove a selected repository from a user secret
        ///
        /// Removes a repository from the selected repositories for a user's codespace secret.
        /// You must authenticate using an access token with the `user` or `read:user` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Codespaces {
    public func codespaceName(_ codespaceName: String) -> WithCodespaceName {
        WithCodespaceName(path: path + "/" + codespaceName)
    }

    public struct WithCodespaceName {
        /// Path: `/user/codespaces/{codespace_name}`
        public let path: String

        /// Get a codespace for the authenticated user
        ///
        /// Gets information about a user's codespace.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user)
        public func get() -> Request<Codespace> {
            .get(path)
        }
    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var machines: Machines {
        Machines(path: path + "/machines")
    }

    public struct Machines {
        /// Path: `/user/codespaces/{codespace_name}/machines`
        public let path: String

        /// List machine types for a codespace
        ///
        /// List the machine types a codespace can transition to use.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var machines: [OctoKit.CodespaceMachine]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.machines = try values.decode([OctoKit.CodespaceMachine].self, forKey: "machines")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var start: Start {
        Start(path: path + "/start")
    }

    public struct Start {
        /// Path: `/user/codespaces/{codespace_name}/start`
        public let path: String


    }
}

extension Paths.User.Codespaces.WithCodespaceName {
    public var stop: Stop {
        Stop(path: path + "/stop")
    }

    public struct Stop {
        /// Path: `/user/codespaces/{codespace_name}/stop`
        public let path: String


    }
}

extension Paths.User {
    public var email: Email {
        Email(path: path + "/email")
    }

    public struct Email {
        /// Path: `/user/email`
        public let path: String
    }
}

extension Paths.User.Email {
    public var visibility: Visibility {
        Visibility(path: path + "/visibility")
    }

    public struct Visibility {
        /// Path: `/user/email/visibility`
        public let path: String


    }
}

extension Paths.User {
    public var emails: Emails {
        Emails(path: path + "/emails")
    }

    public struct Emails {
        /// Path: `/user/emails`
        public let path: String

        /// List email addresses for the authenticated user
        ///
        /// Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Email]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        /// Delete an email address for the authenticated user
        ///
        /// This endpoint is accessible with the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var followers: Followers {
        Followers(path: path + "/followers")
    }

    public struct Followers {
        /// Path: `/user/followers`
        public let path: String

        /// List followers of the authenticated user
        ///
        /// Lists the people following the authenticated user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var following: Following {
        Following(path: path + "/following")
    }

    public struct Following {
        /// Path: `/user/following`
        public let path: String

        /// List the people the authenticated user follows
        ///
        /// Lists the people who the authenticated user follows.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.Following {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/user/following/{username}`
        public let path: String

        /// Check if a person is followed by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Unfollow a user
        ///
        /// Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#unfollow-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var gpgKeys: GpgKeys {
        GpgKeys(path: path + "/gpg_keys")
    }

    public struct GpgKeys {
        /// Path: `/user/gpg_keys`
        public let path: String

        /// List GPG keys for the authenticated user
        ///
        /// Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.GpgKey]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.GpgKeys {
    public func gpgKeyID(_ gpgKeyID: String) -> WithGpgKeyID {
        WithGpgKeyID(path: path + "/" + gpgKeyID)
    }

    public struct WithGpgKeyID {
        /// Path: `/user/gpg_keys/{gpg_key_id}`
        public let path: String

        /// Get a GPG key for the authenticated user
        ///
        /// View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user)
        public func get() -> Request<GpgKey> {
            .get(path)
        }

        /// Delete a GPG key for the authenticated user
        ///
        /// Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var installations: Installations {
        Installations(path: path + "/installations")
    }

    public struct Installations {
        /// Path: `/user/installations`
        public let path: String

        /// List app installations accessible to the user access token
        ///
        /// Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
        /// 
        /// You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        /// 
        /// You can find the permissions for the installation under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var installations: [OctoKit.Installation]
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.installations = try values.decode([OctoKit.Installation].self, forKey: "installations")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Installations {
    public func installationID(_ installationID: String) -> WithInstallationID {
        WithInstallationID(path: path + "/" + installationID)
    }

    public struct WithInstallationID {
        /// Path: `/user/installations/{installation_id}`
        public let path: String
    }
}

extension Paths.User.Installations.WithInstallationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/installations/{installation_id}/repositories`
        public let path: String

        /// List repositories accessible to the user access token
        ///
        /// List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        /// 
        /// You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
        /// 
        /// The access the user has to each repository is included in the hash under the `permissions` key.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var repositories: [OctoKit.Repository]
            public var repositorySelection: String?
            public var totalCount: Int

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.repositories = try values.decode([OctoKit.Repository].self, forKey: "repositories")
                self.repositorySelection = try values.decodeIfPresent(String.self, forKey: "repository_selection")
                self.totalCount = try values.decode(Int.self, forKey: "total_count")
            }
        }
    }
}

extension Paths.User.Installations.WithInstallationID.Repositories {
    public func repositoryID(_ repositoryID: String) -> WithRepositoryID {
        WithRepositoryID(path: path + "/" + repositoryID)
    }

    public struct WithRepositoryID {
        /// Path: `/user/installations/{installation_id}/repositories/{repository_id}`
        public let path: String

        /// Remove a repository from an app installation
        ///
        /// Remove a single repository from an installation. The authenticated user must have admin access to the repository.
        /// 
        /// You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var interactionLimits: InteractionLimits {
        InteractionLimits(path: path + "/interaction-limits")
    }

    public struct InteractionLimits {
        /// Path: `/user/interaction-limits`
        public let path: String

        /// Get interaction restrictions for your public repositories
        ///
        /// Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// Interaction Limits
            ///
            /// Interaction limit settings.
            public var interactionLimitResponse: InteractionLimitResponse?
            public var object: [String: AnyJSON]?

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.interactionLimitResponse = try? container.decode(InteractionLimitResponse.self)
                self.object = try? container.decode([String: AnyJSON].self)
            }
        }

        /// Set interaction restrictions for your public repositories
        ///
        /// Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories)
        public func put(_ body: InteractionLimit) -> Request<InteractionLimitResponse> {
            .put(path, body: body)
        }

        /// Remove interaction restrictions from your public repositories
        ///
        /// Removes any interaction restrictions from your public repositories.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var issues: Issues {
        Issues(path: path + "/issues")
    }

    public struct Issues {
        /// Path: `/user/issues`
        public let path: String

        /// List user account issues assigned to the authenticated user
        ///
        /// List issues across owned and member repositories assigned to the authenticated user.
        /// 
        /// **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
        /// reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
        /// the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
        /// request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user)
        public func get() -> Request<[OctoKit.Issue]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/user/keys`
        public let path: String

        /// List public SSH keys for the authenticated user
        ///
        /// Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Key]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.Keys {
    public func keyID(_ keyID: String) -> WithKeyID {
        WithKeyID(path: path + "/" + keyID)
    }

    public struct WithKeyID {
        /// Path: `/user/keys/{key_id}`
        public let path: String

        /// Get a public SSH key for the authenticated user
        ///
        /// View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user)
        public func get() -> Request<Key> {
            .get(path)
        }

        /// Delete a public SSH key for the authenticated user
        ///
        /// Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var marketplacePurchases: MarketplacePurchases {
        MarketplacePurchases(path: path + "/marketplace_purchases")
    }

    public struct MarketplacePurchases {
        /// Path: `/user/marketplace_purchases`
        public let path: String

        /// List subscriptions for the authenticated user
        ///
        /// Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.UserMarketplacePurchase]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.MarketplacePurchases {
    public var stubbed: Stubbed {
        Stubbed(path: path + "/stubbed")
    }

    public struct Stubbed {
        /// Path: `/user/marketplace_purchases/stubbed`
        public let path: String

        /// List subscriptions for the authenticated user (stubbed)
        ///
        /// Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed)
        public func get() -> Request<[OctoKit.UserMarketplacePurchase]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/user/memberships`
        public let path: String
    }
}

extension Paths.User.Memberships {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/user/memberships/orgs`
        public let path: String

        /// List organization memberships for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.OrgMembership]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.Memberships.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: path + "/" + org)
    }

    public struct WithOrg {
        /// Path: `/user/memberships/orgs/{org}`
        public let path: String

        /// Get an organization membership for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user)
        public func get() -> Request<OrgMembership> {
            .get(path)
        }
    }
}

extension Paths.User {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/user/migrations`
        public let path: String

        /// List user migrations
        ///
        /// Lists all migrations a user has started.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-user-migrations)
        public func get() -> Request<[OctoKit.Migration]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.Migrations {
    public func migrationID(_ migrationID: String) -> WithMigrationID {
        WithMigrationID(path: path + "/" + migrationID)
    }

    public struct WithMigrationID {
        /// Path: `/user/migrations/{migration_id}`
        public let path: String

        /// Get a user migration status
        ///
        /// Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
        /// 
        /// *   `pending` - the migration hasn't started yet.
        /// *   `exporting` - the migration is in progress.
        /// *   `exported` - the migration finished successfully.
        /// *   `failed` - the migration failed.
        /// 
        /// Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status)
        public func get() -> Request<Migration> {
            .get(path)
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var archive: Archive {
        Archive(path: path + "/archive")
    }

    public struct Archive {
        /// Path: `/user/migrations/{migration_id}/archive`
        public let path: String

        /// Download a user migration archive
        ///
        /// Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
        /// 
        /// *   attachments
        /// *   bases
        /// *   commit\_comments
        /// *   issue\_comments
        /// *   issue\_events
        /// *   issues
        /// *   milestones
        /// *   organizations
        /// *   projects
        /// *   protected\_branches
        /// *   pull\_request\_reviews
        /// *   pull\_requests
        /// *   releases
        /// *   repositories
        /// *   review\_comments
        /// *   schema
        /// *   users
        /// 
        /// The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Delete a user migration archive
        ///
        /// Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#delete-a-user-migration-archive)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/user/migrations/{migration_id}/repos`
        public let path: String
    }
}

extension Paths.User.Migrations.WithMigrationID.Repos {
    public func repoName(_ repoName: String) -> WithRepoName {
        WithRepoName(path: path + "/" + repoName)
    }

    public struct WithRepoName {
        /// Path: `/user/migrations/{migration_id}/repos/{repo_name}`
        public let path: String
    }
}

extension Paths.User.Migrations.WithMigrationID.Repos.WithRepoName {
    public var lock: Lock {
        Lock(path: path + "/lock")
    }

    public struct Lock {
        /// Path: `/user/migrations/{migration_id}/repos/{repo_name}/lock`
        public let path: String

        /// Unlock a user repository
        ///
        /// Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#unlock-a-user-repository)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Migrations.WithMigrationID {
    public var repositories: Repositories {
        Repositories(path: path + "/repositories")
    }

    public struct Repositories {
        /// Path: `/user/migrations/{migration_id}/repositories`
        public let path: String

        /// List repositories for a user migration
        ///
        /// Lists all the repositories for this user migration.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/user/orgs`
        public let path: String

        /// List organizations for the authenticated user
        ///
        /// List organizations for the authenticated user.
        /// 
        /// **OAuth scope requirements**
        /// 
        /// This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.OrganizationSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/user/packages`
        public let path: String

        /// List packages for the authenticated user's namespace
        ///
        /// Lists packages owned by the authenticated user within the user's namespace.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Package]> {
            .get(path)
        }
    }
}

extension Paths.User.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: path + "/" + packageType)
    }

    public struct WithPackageType {
        /// Path: `/user/packages/{package_type}`
        public let path: String
    }
}

extension Paths.User.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: path + "/" + packageName)
    }

    public struct WithPackageName {
        /// Path: `/user/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for the authenticated user
        ///
        /// Gets a specific package for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user)
        public func get() -> Request<Package> {
            .get(path)
        }

        /// Delete a package for the authenticated user
        ///
        /// Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/user/packages/{package_type}/{package_name}/restore`
        public let path: String


    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/user/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by the authenticated user
        ///
        /// Returns all package versions for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user)
        public func get() -> Request<[OctoKit.PackageVersion]> {
            .get(path)
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: String) -> WithPackageVersionID {
        WithPackageVersionID(path: path + "/" + packageVersionID)
    }

    public struct WithPackageVersionID {
        /// Path: `/user/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for the authenticated user
        ///
        /// Gets a specific package version for a package owned by the authenticated user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user)
        public func get() -> Request<PackageVersion> {
            .get(path)
        }

        /// Delete a package version for the authenticated user
        ///
        /// Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String


    }
}

extension Paths.User {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/user/projects`
        public let path: String


    }
}

extension Paths.User {
    public var publicEmails: PublicEmails {
        PublicEmails(path: path + "/public_emails")
    }

    public struct PublicEmails {
        /// Path: `/user/public_emails`
        public let path: String

        /// List public email addresses for the authenticated user
        ///
        /// Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Email]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/user/repos`
        public let path: String

        /// List repositories for the authenticated user
        ///
        /// Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
        /// 
        /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Repository]> {
            .get(path)
        }
    }
}

extension Paths.User {
    public var repositoryInvitations: RepositoryInvitations {
        RepositoryInvitations(path: path + "/repository_invitations")
    }

    public struct RepositoryInvitations {
        /// Path: `/user/repository_invitations`
        public let path: String

        /// List repository invitations for the authenticated user
        ///
        /// When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.RepositoryInvitation]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.RepositoryInvitations {
    public func invitationID(_ invitationID: String) -> WithInvitationID {
        WithInvitationID(path: path + "/" + invitationID)
    }

    public struct WithInvitationID {
        /// Path: `/user/repository_invitations/{invitation_id}`
        public let path: String

        /// Decline a repository invitation
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#decline-a-repository-invitation)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/user/starred`
        public let path: String

        /// List repositories starred by the authenticated user
        ///
        /// Lists repositories the authenticated user has starred.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user)
        public func get() -> Request<[OctoKit.Repository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User.Starred {
    public func owner(_ owner: String) -> WithOwner {
        WithOwner(path: path + "/" + owner)
    }

    public struct WithOwner {
        /// Path: `/user/starred/{owner}`
        public let path: String
    }
}

extension Paths.User.Starred.WithOwner {
    public func repo(_ repo: String) -> WithRepo {
        WithRepo(path: path + "/" + repo)
    }

    public struct WithRepo {
        /// Path: `/user/starred/{owner}/{repo}`
        public let path: String

        /// Check if a repository is starred by the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user)
        public func get() -> Request<Void> {
            .get(path)
        }

        /// Unstar a repository for the authenticated user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var subscriptions: Subscriptions {
        Subscriptions(path: path + "/subscriptions")
    }

    public struct Subscriptions {
        /// Path: `/user/subscriptions`
        public let path: String

        /// List repositories watched by the authenticated user
        ///
        /// Lists repositories the authenticated user is watching.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.User {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/user/teams`
        public let path: String

        /// List teams for the authenticated user
        ///
        /// List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.TeamFull]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var users: Users {
        Users(path: "/users")
    }

    public struct Users {
        /// Path: `/users`
        public let path: String

        /// List users
        ///
        /// Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
        /// 
        /// Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-users)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users {
    public func username(_ username: String) -> WithUsername {
        WithUsername(path: path + "/" + username)
    }

    public struct WithUsername {
        /// Path: `/users/{username}`
        public let path: String

        /// Get a user
        ///
        /// Provides publicly available information about someone with a GitHub account.
        /// 
        /// GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
        /// 
        /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
        /// 
        /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-a-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetResponse: Codable {
            case privateUser(PrivateUser)
            case publicUser(PublicUser)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(PrivateUser.self) {
                    self = .privateUser(value)
                } else if let value = try? container.decode(PublicUser.self) {
                    self = .publicUser(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var events: Events {
        Events(path: path + "/events")
    }

    public struct Events {
        /// Path: `/users/{username}/events`
        public let path: String

        /// List events for the authenticated user
        ///
        /// If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Events {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/users/{username}/events/orgs`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Events.Orgs {
    public func org(_ org: String) -> WithOrg {
        WithOrg(path: path + "/" + org)
    }

    public struct WithOrg {
        /// Path: `/users/{username}/events/orgs/{org}`
        public let path: String

        /// List organization events for the authenticated user
        ///
        /// This is the user's organization dashboard. You must be authenticated as the user to view this.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Events {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/users/{username}/events/public`
        public let path: String

        /// List public events for a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-for-a-user)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var followers: Followers {
        Followers(path: path + "/followers")
    }

    public struct Followers {
        /// Path: `/users/{username}/followers`
        public let path: String

        /// List followers of a user
        ///
        /// Lists the people following the specified user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-followers-of-a-user)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var following: Following {
        Following(path: path + "/following")
    }

    public struct Following {
        /// Path: `/users/{username}/following`
        public let path: String

        /// List the people a user follows
        ///
        /// Lists the people who the specified user follows.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-the-people-a-user-follows)
        public func get() -> Request<[OctoKit.SimpleUser]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername.Following {
    public func targetUser(_ targetUser: String) -> WithTargetUser {
        WithTargetUser(path: path + "/" + targetUser)
    }

    public struct WithTargetUser {
        /// Path: `/users/{username}/following/{target_user}`
        public let path: String

        /// Check if a user follows another user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user)
        public func get() -> Request<Void> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var gists: Gists {
        Gists(path: path + "/gists")
    }

    public struct Gists {
        /// Path: `/users/{username}/gists`
        public let path: String

        /// List gists for a user
        ///
        /// Lists public gists for the specified user:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#list-gists-for-a-user)
        public func get() -> Request<[OctoKit.BaseGist]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var gpgKeys: GpgKeys {
        GpgKeys(path: path + "/gpg_keys")
    }

    public struct GpgKeys {
        /// Path: `/users/{username}/gpg_keys`
        public let path: String

        /// List GPG keys for a user
        ///
        /// Lists the GPG keys for a user. This information is accessible by anyone.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user)
        public func get() -> Request<[OctoKit.GpgKey]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var hovercard: Hovercard {
        Hovercard(path: path + "/hovercard")
    }

    public struct Hovercard {
        /// Path: `/users/{username}/hovercard`
        public let path: String

        /// Get contextual information for a user
        ///
        /// Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
        /// 
        /// The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
        /// 
        /// ```shell
        ///  curl -u username:token
        ///   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
        /// ```
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user)
        public func get() -> Request<OctoKit.Hovercard> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var installation: Installation {
        Installation(path: path + "/installation")
    }

    public struct Installation {
        /// Path: `/users/{username}/installation`
        public let path: String

        /// Get a user installation for the authenticated app
        ///
        /// Enables an authenticated GitHub App to find the user’s installation information.
        /// 
        /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app)
        public func get() -> Request<OctoKit.Installation> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var keys: Keys {
        Keys(path: path + "/keys")
    }

    public struct Keys {
        /// Path: `/users/{username}/keys`
        public let path: String

        /// List public keys for a user
        ///
        /// Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/users#list-public-keys-for-a-user)
        public func get() -> Request<[OctoKit.KeySimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var orgs: Orgs {
        Orgs(path: path + "/orgs")
    }

    public struct Orgs {
        /// Path: `/users/{username}/orgs`
        public let path: String

        /// List organizations for a user
        ///
        /// List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
        /// 
        /// This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user)
        public func get() -> Request<[OctoKit.OrganizationSimple]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/users/{username}/packages`
        public let path: String

        /// List packages for a user
        ///
        /// Lists all packages in a user's namespace for which the requesting user has access.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#list-packages-for-user)
        public func get() -> Request<[OctoKit.Package]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages {
    public func packageType(_ packageType: String) -> WithPackageType {
        WithPackageType(path: path + "/" + packageType)
    }

    public struct WithPackageType {
        /// Path: `/users/{username}/packages/{package_type}`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType {
    public func packageName(_ packageName: String) -> WithPackageName {
        WithPackageName(path: path + "/" + packageName)
    }

    public struct WithPackageName {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}`
        public let path: String

        /// Get a package for a user
        ///
        /// Gets a specific package metadata for a public package owned by a user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-for-a-user)
        public func get() -> Request<Package> {
            .get(path)
        }

        /// Delete a package for a user
        ///
        /// Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-for-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/restore`
        public let path: String


    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName {
    public var versions: Versions {
        Versions(path: path + "/versions")
    }

    public struct Versions {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions`
        public let path: String

        /// Get all package versions for a package owned by a user
        ///
        /// Returns all package versions for a public package owned by a specified user.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-a-user)
        public func get() -> Request<[OctoKit.PackageVersion]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName.Versions {
    public func packageVersionID(_ packageVersionID: String) -> WithPackageVersionID {
        WithPackageVersionID(path: path + "/" + packageVersionID)
    }

    public struct WithPackageVersionID {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}`
        public let path: String

        /// Get a package version for a user
        ///
        /// Gets a specific package version for a public package owned by a specified user.
        /// 
        /// At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
        /// If `package_type` is not `container`, your token must also include the `repo` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user)
        public func get() -> Request<PackageVersion> {
            .get(path)
        }

        /// Delete package version for a user
        ///
        /// Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
        /// 
        /// To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
        /// - If `package_type` is not `container`, your token must also include the `repo` scope.
        /// - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/packages#delete-a-package-version-for-a-user)
        public func delete() -> Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Users.WithUsername.Packages.WithPackageType.WithPackageName.Versions.WithPackageVersionID {
    public var restore: Restore {
        Restore(path: path + "/restore")
    }

    public struct Restore {
        /// Path: `/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore`
        public let path: String


    }
}

extension Paths.Users.WithUsername {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/users/{username}/projects`
        public let path: String

        /// List user projects
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/projects#list-user-projects)
        public func get() -> Request<[OctoKit.Project]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var receivedEvents: ReceivedEvents {
        ReceivedEvents(path: path + "/received_events")
    }

    public struct ReceivedEvents {
        /// Path: `/users/{username}/received_events`
        public let path: String

        /// List events received by the authenticated user
        ///
        /// These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.ReceivedEvents {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/users/{username}/received_events/public`
        public let path: String

        /// List public events received by a user
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user)
        public func get() -> Request<[OctoKit.Event]> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var repos: Repos {
        Repos(path: path + "/repos")
    }

    public struct Repos {
        /// Path: `/users/{username}/repos`
        public let path: String

        /// List repositories for a user
        ///
        /// Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#list-repositories-for-a-user)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths.Users.WithUsername {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/users/{username}/settings`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Settings {
    public var billing: Billing {
        Billing(path: path + "/billing")
    }

    public struct Billing {
        /// Path: `/users/{username}/settings/billing`
        public let path: String
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/users/{username}/settings/billing/actions`
        public let path: String

        /// Get GitHub Actions billing for a user
        ///
        /// Gets the summary of the free and paid GitHub Actions minutes used.
        /// 
        /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user)
        public func get() -> Request<ActionsBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var packages: Packages {
        Packages(path: path + "/packages")
    }

    public struct Packages {
        /// Path: `/users/{username}/settings/billing/packages`
        public let path: String

        /// Get GitHub Packages billing for a user
        ///
        /// Gets the free and paid storage used for GitHub Packages in gigabytes.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user)
        public func get() -> Request<PackagesBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername.Settings.Billing {
    public var sharedStorage: SharedStorage {
        SharedStorage(path: path + "/shared-storage")
    }

    public struct SharedStorage {
        /// Path: `/users/{username}/settings/billing/shared-storage`
        public let path: String

        /// Get shared storage billing for a user
        ///
        /// Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
        /// 
        /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
        /// 
        /// Access tokens must have the `user` scope.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user)
        public func get() -> Request<CombinedBillingUsage> {
            .get(path)
        }
    }
}

extension Paths.Users.WithUsername {
    public var starred: Starred {
        Starred(path: path + "/starred")
    }

    public struct Starred {
        /// Path: `/users/{username}/starred`
        public let path: String

        /// List repositories starred by a user
        ///
        /// Lists repositories a user has starred.
        /// 
        /// You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user)
        public func get() -> Request<GetResponse> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetResponse: Decodable {
            public var starredRepositories: [OctoKit.StarredRepository]?
            public var repositories: [OctoKit.Repository]?

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.starredRepositories = try? container.decode([OctoKit.StarredRepository].self)
                self.repositories = try? container.decode([OctoKit.Repository].self)
            }
        }
    }
}

extension Paths.Users.WithUsername {
    public var subscriptions: Subscriptions {
        Subscriptions(path: path + "/subscriptions")
    }

    public struct Subscriptions {
        /// Path: `/users/{username}/subscriptions`
        public let path: String

        /// List repositories watched by a user
        ///
        /// Lists repositories a user is watching.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user)
        public func get() -> Request<[OctoKit.MinimalRepository]> {
            .get(path)
        }

        public enum GetHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }
    }
}

extension Paths {
    public static var zen: Zen {
        Zen(path: "/zen")
    }

    public struct Zen {
        /// Path: `/zen`
        public let path: String


    }
}

